
PetFeeder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fa4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08005134  08005134  00015134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051a8  080051a8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080051a8  080051a8  000151a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051b0  080051b0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051b0  080051b0  000151b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051b4  080051b4  000151b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080051b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000074  0800522c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  0800522c  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010227  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002028  00000000  00000000  000302cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001108  00000000  00000000  000322f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001020  00000000  00000000  00033400  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002234a  00000000  00000000  00034420  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c516  00000000  00000000  0005676a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2d0c  00000000  00000000  00062c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013598c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d9c  00000000  00000000  00135a08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800511c 	.word	0x0800511c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800511c 	.word	0x0800511c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b972 	b.w	8000d98 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9e08      	ldr	r6, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	4688      	mov	r8, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d14b      	bne.n	8000b72 <__udivmoddi4+0xa6>
 8000ada:	428a      	cmp	r2, r1
 8000adc:	4615      	mov	r5, r2
 8000ade:	d967      	bls.n	8000bb0 <__udivmoddi4+0xe4>
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b14a      	cbz	r2, 8000afa <__udivmoddi4+0x2e>
 8000ae6:	f1c2 0720 	rsb	r7, r2, #32
 8000aea:	fa01 f302 	lsl.w	r3, r1, r2
 8000aee:	fa20 f707 	lsr.w	r7, r0, r7
 8000af2:	4095      	lsls	r5, r2
 8000af4:	ea47 0803 	orr.w	r8, r7, r3
 8000af8:	4094      	lsls	r4, r2
 8000afa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000afe:	0c23      	lsrs	r3, r4, #16
 8000b00:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b04:	fa1f fc85 	uxth.w	ip, r5
 8000b08:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b0c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b10:	fb07 f10c 	mul.w	r1, r7, ip
 8000b14:	4299      	cmp	r1, r3
 8000b16:	d909      	bls.n	8000b2c <__udivmoddi4+0x60>
 8000b18:	18eb      	adds	r3, r5, r3
 8000b1a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b1e:	f080 811b 	bcs.w	8000d58 <__udivmoddi4+0x28c>
 8000b22:	4299      	cmp	r1, r3
 8000b24:	f240 8118 	bls.w	8000d58 <__udivmoddi4+0x28c>
 8000b28:	3f02      	subs	r7, #2
 8000b2a:	442b      	add	r3, r5
 8000b2c:	1a5b      	subs	r3, r3, r1
 8000b2e:	b2a4      	uxth	r4, r4
 8000b30:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b34:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b3c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b40:	45a4      	cmp	ip, r4
 8000b42:	d909      	bls.n	8000b58 <__udivmoddi4+0x8c>
 8000b44:	192c      	adds	r4, r5, r4
 8000b46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b4a:	f080 8107 	bcs.w	8000d5c <__udivmoddi4+0x290>
 8000b4e:	45a4      	cmp	ip, r4
 8000b50:	f240 8104 	bls.w	8000d5c <__udivmoddi4+0x290>
 8000b54:	3802      	subs	r0, #2
 8000b56:	442c      	add	r4, r5
 8000b58:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b5c:	eba4 040c 	sub.w	r4, r4, ip
 8000b60:	2700      	movs	r7, #0
 8000b62:	b11e      	cbz	r6, 8000b6c <__udivmoddi4+0xa0>
 8000b64:	40d4      	lsrs	r4, r2
 8000b66:	2300      	movs	r3, #0
 8000b68:	e9c6 4300 	strd	r4, r3, [r6]
 8000b6c:	4639      	mov	r1, r7
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d909      	bls.n	8000b8a <__udivmoddi4+0xbe>
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	f000 80eb 	beq.w	8000d52 <__udivmoddi4+0x286>
 8000b7c:	2700      	movs	r7, #0
 8000b7e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b82:	4638      	mov	r0, r7
 8000b84:	4639      	mov	r1, r7
 8000b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8a:	fab3 f783 	clz	r7, r3
 8000b8e:	2f00      	cmp	r7, #0
 8000b90:	d147      	bne.n	8000c22 <__udivmoddi4+0x156>
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d302      	bcc.n	8000b9c <__udivmoddi4+0xd0>
 8000b96:	4282      	cmp	r2, r0
 8000b98:	f200 80fa 	bhi.w	8000d90 <__udivmoddi4+0x2c4>
 8000b9c:	1a84      	subs	r4, r0, r2
 8000b9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	4698      	mov	r8, r3
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	d0e0      	beq.n	8000b6c <__udivmoddi4+0xa0>
 8000baa:	e9c6 4800 	strd	r4, r8, [r6]
 8000bae:	e7dd      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000bb0:	b902      	cbnz	r2, 8000bb4 <__udivmoddi4+0xe8>
 8000bb2:	deff      	udf	#255	; 0xff
 8000bb4:	fab2 f282 	clz	r2, r2
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	f040 808f 	bne.w	8000cdc <__udivmoddi4+0x210>
 8000bbe:	1b49      	subs	r1, r1, r5
 8000bc0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bc4:	fa1f f885 	uxth.w	r8, r5
 8000bc8:	2701      	movs	r7, #1
 8000bca:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x124>
 8000be0:	18eb      	adds	r3, r5, r3
 8000be2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x122>
 8000be8:	4299      	cmp	r1, r3
 8000bea:	f200 80cd 	bhi.w	8000d88 <__udivmoddi4+0x2bc>
 8000bee:	4684      	mov	ip, r0
 8000bf0:	1a59      	subs	r1, r3, r1
 8000bf2:	b2a3      	uxth	r3, r4
 8000bf4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bf8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bfc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c00:	fb08 f800 	mul.w	r8, r8, r0
 8000c04:	45a0      	cmp	r8, r4
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0x14c>
 8000c08:	192c      	adds	r4, r5, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x14a>
 8000c10:	45a0      	cmp	r8, r4
 8000c12:	f200 80b6 	bhi.w	8000d82 <__udivmoddi4+0x2b6>
 8000c16:	4618      	mov	r0, r3
 8000c18:	eba4 0408 	sub.w	r4, r4, r8
 8000c1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c20:	e79f      	b.n	8000b62 <__udivmoddi4+0x96>
 8000c22:	f1c7 0c20 	rsb	ip, r7, #32
 8000c26:	40bb      	lsls	r3, r7
 8000c28:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c2c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c30:	fa01 f407 	lsl.w	r4, r1, r7
 8000c34:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c38:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c3c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c40:	4325      	orrs	r5, r4
 8000c42:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c46:	0c2c      	lsrs	r4, r5, #16
 8000c48:	fb08 3319 	mls	r3, r8, r9, r3
 8000c4c:	fa1f fa8e 	uxth.w	sl, lr
 8000c50:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c54:	fb09 f40a 	mul.w	r4, r9, sl
 8000c58:	429c      	cmp	r4, r3
 8000c5a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c5e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c62:	d90b      	bls.n	8000c7c <__udivmoddi4+0x1b0>
 8000c64:	eb1e 0303 	adds.w	r3, lr, r3
 8000c68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c6c:	f080 8087 	bcs.w	8000d7e <__udivmoddi4+0x2b2>
 8000c70:	429c      	cmp	r4, r3
 8000c72:	f240 8084 	bls.w	8000d7e <__udivmoddi4+0x2b2>
 8000c76:	f1a9 0902 	sub.w	r9, r9, #2
 8000c7a:	4473      	add	r3, lr
 8000c7c:	1b1b      	subs	r3, r3, r4
 8000c7e:	b2ad      	uxth	r5, r5
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c8c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c90:	45a2      	cmp	sl, r4
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x1da>
 8000c94:	eb1e 0404 	adds.w	r4, lr, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	d26b      	bcs.n	8000d76 <__udivmoddi4+0x2aa>
 8000c9e:	45a2      	cmp	sl, r4
 8000ca0:	d969      	bls.n	8000d76 <__udivmoddi4+0x2aa>
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	4474      	add	r4, lr
 8000ca6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000caa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cae:	eba4 040a 	sub.w	r4, r4, sl
 8000cb2:	454c      	cmp	r4, r9
 8000cb4:	46c2      	mov	sl, r8
 8000cb6:	464b      	mov	r3, r9
 8000cb8:	d354      	bcc.n	8000d64 <__udivmoddi4+0x298>
 8000cba:	d051      	beq.n	8000d60 <__udivmoddi4+0x294>
 8000cbc:	2e00      	cmp	r6, #0
 8000cbe:	d069      	beq.n	8000d94 <__udivmoddi4+0x2c8>
 8000cc0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cc4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cc8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ccc:	40fd      	lsrs	r5, r7
 8000cce:	40fc      	lsrs	r4, r7
 8000cd0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cd4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cd8:	2700      	movs	r7, #0
 8000cda:	e747      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000cdc:	f1c2 0320 	rsb	r3, r2, #32
 8000ce0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ce4:	4095      	lsls	r5, r2
 8000ce6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cea:	fa21 f303 	lsr.w	r3, r1, r3
 8000cee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf2:	4338      	orrs	r0, r7
 8000cf4:	0c01      	lsrs	r1, r0, #16
 8000cf6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cfa:	fa1f f885 	uxth.w	r8, r5
 8000cfe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb07 f308 	mul.w	r3, r7, r8
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d10:	d907      	bls.n	8000d22 <__udivmoddi4+0x256>
 8000d12:	1869      	adds	r1, r5, r1
 8000d14:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d18:	d22f      	bcs.n	8000d7a <__udivmoddi4+0x2ae>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d92d      	bls.n	8000d7a <__udivmoddi4+0x2ae>
 8000d1e:	3f02      	subs	r7, #2
 8000d20:	4429      	add	r1, r5
 8000d22:	1acb      	subs	r3, r1, r3
 8000d24:	b281      	uxth	r1, r0
 8000d26:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d2a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d32:	fb00 f308 	mul.w	r3, r0, r8
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d907      	bls.n	8000d4a <__udivmoddi4+0x27e>
 8000d3a:	1869      	adds	r1, r5, r1
 8000d3c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d40:	d217      	bcs.n	8000d72 <__udivmoddi4+0x2a6>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d915      	bls.n	8000d72 <__udivmoddi4+0x2a6>
 8000d46:	3802      	subs	r0, #2
 8000d48:	4429      	add	r1, r5
 8000d4a:	1ac9      	subs	r1, r1, r3
 8000d4c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d50:	e73b      	b.n	8000bca <__udivmoddi4+0xfe>
 8000d52:	4637      	mov	r7, r6
 8000d54:	4630      	mov	r0, r6
 8000d56:	e709      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000d58:	4607      	mov	r7, r0
 8000d5a:	e6e7      	b.n	8000b2c <__udivmoddi4+0x60>
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	e6fb      	b.n	8000b58 <__udivmoddi4+0x8c>
 8000d60:	4541      	cmp	r1, r8
 8000d62:	d2ab      	bcs.n	8000cbc <__udivmoddi4+0x1f0>
 8000d64:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d68:	eb69 020e 	sbc.w	r2, r9, lr
 8000d6c:	3801      	subs	r0, #1
 8000d6e:	4613      	mov	r3, r2
 8000d70:	e7a4      	b.n	8000cbc <__udivmoddi4+0x1f0>
 8000d72:	4660      	mov	r0, ip
 8000d74:	e7e9      	b.n	8000d4a <__udivmoddi4+0x27e>
 8000d76:	4618      	mov	r0, r3
 8000d78:	e795      	b.n	8000ca6 <__udivmoddi4+0x1da>
 8000d7a:	4667      	mov	r7, ip
 8000d7c:	e7d1      	b.n	8000d22 <__udivmoddi4+0x256>
 8000d7e:	4681      	mov	r9, r0
 8000d80:	e77c      	b.n	8000c7c <__udivmoddi4+0x1b0>
 8000d82:	3802      	subs	r0, #2
 8000d84:	442c      	add	r4, r5
 8000d86:	e747      	b.n	8000c18 <__udivmoddi4+0x14c>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	442b      	add	r3, r5
 8000d8e:	e72f      	b.n	8000bf0 <__udivmoddi4+0x124>
 8000d90:	4638      	mov	r0, r7
 8000d92:	e708      	b.n	8000ba6 <__udivmoddi4+0xda>
 8000d94:	4637      	mov	r7, r6
 8000d96:	e6e9      	b.n	8000b6c <__udivmoddi4+0xa0>

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000da0:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0d      	ldr	r2, [pc, #52]	; (8000ddc <HAL_Init+0x40>)
 8000da6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dac:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <HAL_Init+0x40>)
 8000db2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <HAL_Init+0x40>)
 8000dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc4:	2003      	movs	r0, #3
 8000dc6:	f000 f92f 	bl	8001028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f000 f808 	bl	8000de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd0:	f003 fb40 	bl	8004454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40023c00 	.word	0x40023c00

08000de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <HAL_InitTick+0x54>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <HAL_InitTick+0x58>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	4619      	mov	r1, r3
 8000df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f939 	bl	8001076 <HAL_SYSTICK_Config>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e00e      	b.n	8000e2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b0f      	cmp	r3, #15
 8000e12:	d80a      	bhi.n	8000e2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e14:	2200      	movs	r2, #0
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1c:	f000 f90f 	bl	800103e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e20:	4a06      	ldr	r2, [pc, #24]	; (8000e3c <HAL_InitTick+0x5c>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	e000      	b.n	8000e2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	2000000c 	.word	0x2000000c
 8000e38:	20000004 	.word	0x20000004
 8000e3c:	20000000 	.word	0x20000000

08000e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_IncTick+0x20>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_IncTick+0x24>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <HAL_IncTick+0x24>)
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000004 	.word	0x20000004
 8000e64:	2000009c 	.word	0x2000009c

08000e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <HAL_GetTick+0x14>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	2000009c 	.word	0x2000009c

08000e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e88:	f7ff ffee 	bl	8000e68 <HAL_GetTick>
 8000e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e98:	d005      	beq.n	8000ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <HAL_Delay+0x40>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ea6:	bf00      	nop
 8000ea8:	f7ff ffde 	bl	8000e68 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d8f7      	bhi.n	8000ea8 <HAL_Delay+0x28>
  {
  }
}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000004 	.word	0x20000004

08000ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef6:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	60d3      	str	r3, [r2, #12]
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <__NVIC_GetPriorityGrouping+0x18>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	f003 0307 	and.w	r3, r3, #7
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	db0a      	blt.n	8000f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	490c      	ldr	r1, [pc, #48]	; (8000f74 <__NVIC_SetPriority+0x4c>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	0112      	lsls	r2, r2, #4
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f50:	e00a      	b.n	8000f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4908      	ldr	r1, [pc, #32]	; (8000f78 <__NVIC_SetPriority+0x50>)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	f003 030f 	and.w	r3, r3, #15
 8000f5e:	3b04      	subs	r3, #4
 8000f60:	0112      	lsls	r2, r2, #4
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	440b      	add	r3, r1
 8000f66:	761a      	strb	r2, [r3, #24]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000e100 	.word	0xe000e100
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b089      	sub	sp, #36	; 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f1c3 0307 	rsb	r3, r3, #7
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	bf28      	it	cs
 8000f9a:	2304      	movcs	r3, #4
 8000f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	2b06      	cmp	r3, #6
 8000fa4:	d902      	bls.n	8000fac <NVIC_EncodePriority+0x30>
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3b03      	subs	r3, #3
 8000faa:	e000      	b.n	8000fae <NVIC_EncodePriority+0x32>
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa01 f303 	lsl.w	r3, r1, r3
 8000fce:	43d9      	mvns	r1, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	4313      	orrs	r3, r2
         );
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3724      	adds	r7, #36	; 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ff4:	d301      	bcc.n	8000ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00f      	b.n	800101a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <SysTick_Config+0x40>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001002:	210f      	movs	r1, #15
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f7ff ff8e 	bl	8000f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <SysTick_Config+0x40>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001012:	4b04      	ldr	r3, [pc, #16]	; (8001024 <SysTick_Config+0x40>)
 8001014:	2207      	movs	r2, #7
 8001016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	e000e010 	.word	0xe000e010

08001028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ff47 	bl	8000ec4 <__NVIC_SetPriorityGrouping>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001050:	f7ff ff5c 	bl	8000f0c <__NVIC_GetPriorityGrouping>
 8001054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	68b9      	ldr	r1, [r7, #8]
 800105a:	6978      	ldr	r0, [r7, #20]
 800105c:	f7ff ff8e 	bl	8000f7c <NVIC_EncodePriority>
 8001060:	4602      	mov	r2, r0
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff5d 	bl	8000f28 <__NVIC_SetPriority>
}
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ffb0 	bl	8000fe4 <SysTick_Config>
 8001084:	4603      	mov	r3, r0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001090:	b480      	push	{r7}
 8001092:	b089      	sub	sp, #36	; 0x24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
 80010aa:	e16b      	b.n	8001384 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010ac:	2201      	movs	r2, #1
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	f040 815a 	bne.w	800137e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x4a>
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b12      	cmp	r3, #18
 80010d8:	d123      	bne.n	8001122 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	08da      	lsrs	r2, r3, #3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3208      	adds	r2, #8
 80010e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	220f      	movs	r2, #15
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	691a      	ldr	r2, [r3, #16]
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	f003 0307 	and.w	r3, r3, #7
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	08da      	lsrs	r2, r3, #3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3208      	adds	r2, #8
 800111c:	69b9      	ldr	r1, [r7, #24]
 800111e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	2203      	movs	r2, #3
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 0203 	and.w	r2, r3, #3
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4313      	orrs	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d00b      	beq.n	8001176 <HAL_GPIO_Init+0xe6>
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b02      	cmp	r3, #2
 8001164:	d007      	beq.n	8001176 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800116a:	2b11      	cmp	r3, #17
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b12      	cmp	r3, #18
 8001174:	d130      	bne.n	80011d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	2203      	movs	r2, #3
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	68da      	ldr	r2, [r3, #12]
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ac:	2201      	movs	r2, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	091b      	lsrs	r3, r3, #4
 80011c2:	f003 0201 	and.w	r2, r3, #1
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 80b4 	beq.w	800137e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b5f      	ldr	r3, [pc, #380]	; (8001398 <HAL_GPIO_Init+0x308>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	4a5e      	ldr	r2, [pc, #376]	; (8001398 <HAL_GPIO_Init+0x308>)
 8001220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001224:	6453      	str	r3, [r2, #68]	; 0x44
 8001226:	4b5c      	ldr	r3, [pc, #368]	; (8001398 <HAL_GPIO_Init+0x308>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001232:	4a5a      	ldr	r2, [pc, #360]	; (800139c <HAL_GPIO_Init+0x30c>)
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	089b      	lsrs	r3, r3, #2
 8001238:	3302      	adds	r3, #2
 800123a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	220f      	movs	r2, #15
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a51      	ldr	r2, [pc, #324]	; (80013a0 <HAL_GPIO_Init+0x310>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d02b      	beq.n	80012b6 <HAL_GPIO_Init+0x226>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a50      	ldr	r2, [pc, #320]	; (80013a4 <HAL_GPIO_Init+0x314>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d025      	beq.n	80012b2 <HAL_GPIO_Init+0x222>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4f      	ldr	r2, [pc, #316]	; (80013a8 <HAL_GPIO_Init+0x318>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d01f      	beq.n	80012ae <HAL_GPIO_Init+0x21e>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4e      	ldr	r2, [pc, #312]	; (80013ac <HAL_GPIO_Init+0x31c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d019      	beq.n	80012aa <HAL_GPIO_Init+0x21a>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4d      	ldr	r2, [pc, #308]	; (80013b0 <HAL_GPIO_Init+0x320>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d013      	beq.n	80012a6 <HAL_GPIO_Init+0x216>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4c      	ldr	r2, [pc, #304]	; (80013b4 <HAL_GPIO_Init+0x324>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d00d      	beq.n	80012a2 <HAL_GPIO_Init+0x212>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4b      	ldr	r2, [pc, #300]	; (80013b8 <HAL_GPIO_Init+0x328>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d007      	beq.n	800129e <HAL_GPIO_Init+0x20e>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a4a      	ldr	r2, [pc, #296]	; (80013bc <HAL_GPIO_Init+0x32c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d101      	bne.n	800129a <HAL_GPIO_Init+0x20a>
 8001296:	2307      	movs	r3, #7
 8001298:	e00e      	b.n	80012b8 <HAL_GPIO_Init+0x228>
 800129a:	2308      	movs	r3, #8
 800129c:	e00c      	b.n	80012b8 <HAL_GPIO_Init+0x228>
 800129e:	2306      	movs	r3, #6
 80012a0:	e00a      	b.n	80012b8 <HAL_GPIO_Init+0x228>
 80012a2:	2305      	movs	r3, #5
 80012a4:	e008      	b.n	80012b8 <HAL_GPIO_Init+0x228>
 80012a6:	2304      	movs	r3, #4
 80012a8:	e006      	b.n	80012b8 <HAL_GPIO_Init+0x228>
 80012aa:	2303      	movs	r3, #3
 80012ac:	e004      	b.n	80012b8 <HAL_GPIO_Init+0x228>
 80012ae:	2302      	movs	r3, #2
 80012b0:	e002      	b.n	80012b8 <HAL_GPIO_Init+0x228>
 80012b2:	2301      	movs	r3, #1
 80012b4:	e000      	b.n	80012b8 <HAL_GPIO_Init+0x228>
 80012b6:	2300      	movs	r3, #0
 80012b8:	69fa      	ldr	r2, [r7, #28]
 80012ba:	f002 0203 	and.w	r2, r2, #3
 80012be:	0092      	lsls	r2, r2, #2
 80012c0:	4093      	lsls	r3, r2
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012c8:	4934      	ldr	r1, [pc, #208]	; (800139c <HAL_GPIO_Init+0x30c>)
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	089b      	lsrs	r3, r3, #2
 80012ce:	3302      	adds	r3, #2
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012d6:	4b3a      	ldr	r3, [pc, #232]	; (80013c0 <HAL_GPIO_Init+0x330>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012fa:	4a31      	ldr	r2, [pc, #196]	; (80013c0 <HAL_GPIO_Init+0x330>)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001300:	4b2f      	ldr	r3, [pc, #188]	; (80013c0 <HAL_GPIO_Init+0x330>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001324:	4a26      	ldr	r2, [pc, #152]	; (80013c0 <HAL_GPIO_Init+0x330>)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800132a:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <HAL_GPIO_Init+0x330>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800134e:	4a1c      	ldr	r2, [pc, #112]	; (80013c0 <HAL_GPIO_Init+0x330>)
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001354:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <HAL_GPIO_Init+0x330>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001378:	4a11      	ldr	r2, [pc, #68]	; (80013c0 <HAL_GPIO_Init+0x330>)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3301      	adds	r3, #1
 8001382:	61fb      	str	r3, [r7, #28]
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	2b0f      	cmp	r3, #15
 8001388:	f67f ae90 	bls.w	80010ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800138c:	bf00      	nop
 800138e:	3724      	adds	r7, #36	; 0x24
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	40023800 	.word	0x40023800
 800139c:	40013800 	.word	0x40013800
 80013a0:	40020000 	.word	0x40020000
 80013a4:	40020400 	.word	0x40020400
 80013a8:	40020800 	.word	0x40020800
 80013ac:	40020c00 	.word	0x40020c00
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40021400 	.word	0x40021400
 80013b8:	40021800 	.word	0x40021800
 80013bc:	40021c00 	.word	0x40021c00
 80013c0:	40013c00 	.word	0x40013c00

080013c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	691a      	ldr	r2, [r3, #16]
 80013d4:	887b      	ldrh	r3, [r7, #2]
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d002      	beq.n	80013e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013dc:	2301      	movs	r3, #1
 80013de:	73fb      	strb	r3, [r7, #15]
 80013e0:	e001      	b.n	80013e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013e2:	2300      	movs	r3, #0
 80013e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	807b      	strh	r3, [r7, #2]
 8001400:	4613      	mov	r3, r2
 8001402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001404:	787b      	ldrb	r3, [r7, #1]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800140a:	887a      	ldrh	r2, [r7, #2]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001410:	e003      	b.n	800141a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001412:	887b      	ldrh	r3, [r7, #2]
 8001414:	041a      	lsls	r2, r3, #16
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	619a      	str	r2, [r3, #24]
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e10f      	b.n	800165a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d106      	bne.n	8001454 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f003 f828 	bl	80044a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2224      	movs	r2, #36	; 0x24
 8001458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 0201 	bic.w	r2, r2, #1
 800146a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800146c:	f000 fd0c 	bl	8001e88 <HAL_RCC_GetPCLK1Freq>
 8001470:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	4a7b      	ldr	r2, [pc, #492]	; (8001664 <HAL_I2C_Init+0x23c>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d807      	bhi.n	800148c <HAL_I2C_Init+0x64>
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4a7a      	ldr	r2, [pc, #488]	; (8001668 <HAL_I2C_Init+0x240>)
 8001480:	4293      	cmp	r3, r2
 8001482:	bf94      	ite	ls
 8001484:	2301      	movls	r3, #1
 8001486:	2300      	movhi	r3, #0
 8001488:	b2db      	uxtb	r3, r3
 800148a:	e006      	b.n	800149a <HAL_I2C_Init+0x72>
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4a77      	ldr	r2, [pc, #476]	; (800166c <HAL_I2C_Init+0x244>)
 8001490:	4293      	cmp	r3, r2
 8001492:	bf94      	ite	ls
 8001494:	2301      	movls	r3, #1
 8001496:	2300      	movhi	r3, #0
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e0db      	b.n	800165a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4a72      	ldr	r2, [pc, #456]	; (8001670 <HAL_I2C_Init+0x248>)
 80014a6:	fba2 2303 	umull	r2, r3, r2, r3
 80014aa:	0c9b      	lsrs	r3, r3, #18
 80014ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68ba      	ldr	r2, [r7, #8]
 80014be:	430a      	orrs	r2, r1
 80014c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	4a64      	ldr	r2, [pc, #400]	; (8001664 <HAL_I2C_Init+0x23c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d802      	bhi.n	80014dc <HAL_I2C_Init+0xb4>
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	3301      	adds	r3, #1
 80014da:	e009      	b.n	80014f0 <HAL_I2C_Init+0xc8>
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014e2:	fb02 f303 	mul.w	r3, r2, r3
 80014e6:	4a63      	ldr	r2, [pc, #396]	; (8001674 <HAL_I2C_Init+0x24c>)
 80014e8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ec:	099b      	lsrs	r3, r3, #6
 80014ee:	3301      	adds	r3, #1
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	6812      	ldr	r2, [r2, #0]
 80014f4:	430b      	orrs	r3, r1
 80014f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001502:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	4956      	ldr	r1, [pc, #344]	; (8001664 <HAL_I2C_Init+0x23c>)
 800150c:	428b      	cmp	r3, r1
 800150e:	d80d      	bhi.n	800152c <HAL_I2C_Init+0x104>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	1e59      	subs	r1, r3, #1
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	fbb1 f3f3 	udiv	r3, r1, r3
 800151e:	3301      	adds	r3, #1
 8001520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001524:	2b04      	cmp	r3, #4
 8001526:	bf38      	it	cc
 8001528:	2304      	movcc	r3, #4
 800152a:	e04f      	b.n	80015cc <HAL_I2C_Init+0x1a4>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d111      	bne.n	8001558 <HAL_I2C_Init+0x130>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	1e58      	subs	r0, r3, #1
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6859      	ldr	r1, [r3, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	440b      	add	r3, r1
 8001542:	fbb0 f3f3 	udiv	r3, r0, r3
 8001546:	3301      	adds	r3, #1
 8001548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800154c:	2b00      	cmp	r3, #0
 800154e:	bf0c      	ite	eq
 8001550:	2301      	moveq	r3, #1
 8001552:	2300      	movne	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	e012      	b.n	800157e <HAL_I2C_Init+0x156>
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	1e58      	subs	r0, r3, #1
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6859      	ldr	r1, [r3, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	0099      	lsls	r1, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	fbb0 f3f3 	udiv	r3, r0, r3
 800156e:	3301      	adds	r3, #1
 8001570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001574:	2b00      	cmp	r3, #0
 8001576:	bf0c      	ite	eq
 8001578:	2301      	moveq	r3, #1
 800157a:	2300      	movne	r3, #0
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_I2C_Init+0x15e>
 8001582:	2301      	movs	r3, #1
 8001584:	e022      	b.n	80015cc <HAL_I2C_Init+0x1a4>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10e      	bne.n	80015ac <HAL_I2C_Init+0x184>
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	1e58      	subs	r0, r3, #1
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6859      	ldr	r1, [r3, #4]
 8001596:	460b      	mov	r3, r1
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	440b      	add	r3, r1
 800159c:	fbb0 f3f3 	udiv	r3, r0, r3
 80015a0:	3301      	adds	r3, #1
 80015a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015aa:	e00f      	b.n	80015cc <HAL_I2C_Init+0x1a4>
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	1e58      	subs	r0, r3, #1
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6859      	ldr	r1, [r3, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	440b      	add	r3, r1
 80015ba:	0099      	lsls	r1, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	fbb0 f3f3 	udiv	r3, r0, r3
 80015c2:	3301      	adds	r3, #1
 80015c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	6809      	ldr	r1, [r1, #0]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69da      	ldr	r2, [r3, #28]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6911      	ldr	r1, [r2, #16]
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	68d2      	ldr	r2, [r2, #12]
 8001606:	4311      	orrs	r1, r2
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	6812      	ldr	r2, [r2, #0]
 800160c:	430b      	orrs	r3, r1
 800160e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695a      	ldr	r2, [r3, #20]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	430a      	orrs	r2, r1
 800162a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 0201 	orr.w	r2, r2, #1
 800163a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2220      	movs	r2, #32
 8001646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	000186a0 	.word	0x000186a0
 8001668:	001e847f 	.word	0x001e847f
 800166c:	003d08ff 	.word	0x003d08ff
 8001670:	431bde83 	.word	0x431bde83
 8001674:	10624dd3 	.word	0x10624dd3

08001678 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e22d      	b.n	8001ae6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d075      	beq.n	8001782 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001696:	4ba3      	ldr	r3, [pc, #652]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d00c      	beq.n	80016bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016a2:	4ba0      	ldr	r3, [pc, #640]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016aa:	2b08      	cmp	r3, #8
 80016ac:	d112      	bne.n	80016d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ae:	4b9d      	ldr	r3, [pc, #628]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016ba:	d10b      	bne.n	80016d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016bc:	4b99      	ldr	r3, [pc, #612]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d05b      	beq.n	8001780 <HAL_RCC_OscConfig+0x108>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d157      	bne.n	8001780 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e208      	b.n	8001ae6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016dc:	d106      	bne.n	80016ec <HAL_RCC_OscConfig+0x74>
 80016de:	4b91      	ldr	r3, [pc, #580]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a90      	ldr	r2, [pc, #576]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80016e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	e01d      	b.n	8001728 <HAL_RCC_OscConfig+0xb0>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016f4:	d10c      	bne.n	8001710 <HAL_RCC_OscConfig+0x98>
 80016f6:	4b8b      	ldr	r3, [pc, #556]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a8a      	ldr	r2, [pc, #552]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80016fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	4b88      	ldr	r3, [pc, #544]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a87      	ldr	r2, [pc, #540]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 8001708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	e00b      	b.n	8001728 <HAL_RCC_OscConfig+0xb0>
 8001710:	4b84      	ldr	r3, [pc, #528]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a83      	ldr	r2, [pc, #524]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 8001716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	4b81      	ldr	r3, [pc, #516]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a80      	ldr	r2, [pc, #512]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 8001722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d013      	beq.n	8001758 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001730:	f7ff fb9a 	bl	8000e68 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001738:	f7ff fb96 	bl	8000e68 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b64      	cmp	r3, #100	; 0x64
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e1cd      	b.n	8001ae6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174a:	4b76      	ldr	r3, [pc, #472]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f0      	beq.n	8001738 <HAL_RCC_OscConfig+0xc0>
 8001756:	e014      	b.n	8001782 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001758:	f7ff fb86 	bl	8000e68 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001760:	f7ff fb82 	bl	8000e68 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b64      	cmp	r3, #100	; 0x64
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e1b9      	b.n	8001ae6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001772:	4b6c      	ldr	r3, [pc, #432]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f0      	bne.n	8001760 <HAL_RCC_OscConfig+0xe8>
 800177e:	e000      	b.n	8001782 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d063      	beq.n	8001856 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800178e:	4b65      	ldr	r3, [pc, #404]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 030c 	and.w	r3, r3, #12
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00b      	beq.n	80017b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800179a:	4b62      	ldr	r3, [pc, #392]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017a2:	2b08      	cmp	r3, #8
 80017a4:	d11c      	bne.n	80017e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017a6:	4b5f      	ldr	r3, [pc, #380]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d116      	bne.n	80017e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b2:	4b5c      	ldr	r3, [pc, #368]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d005      	beq.n	80017ca <HAL_RCC_OscConfig+0x152>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d001      	beq.n	80017ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e18d      	b.n	8001ae6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ca:	4b56      	ldr	r3, [pc, #344]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	4952      	ldr	r1, [pc, #328]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017de:	e03a      	b.n	8001856 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d020      	beq.n	800182a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017e8:	4b4f      	ldr	r3, [pc, #316]	; (8001928 <HAL_RCC_OscConfig+0x2b0>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ee:	f7ff fb3b 	bl	8000e68 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f6:	f7ff fb37 	bl	8000e68 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e16e      	b.n	8001ae6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001808:	4b46      	ldr	r3, [pc, #280]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0f0      	beq.n	80017f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001814:	4b43      	ldr	r3, [pc, #268]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	4940      	ldr	r1, [pc, #256]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 8001824:	4313      	orrs	r3, r2
 8001826:	600b      	str	r3, [r1, #0]
 8001828:	e015      	b.n	8001856 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800182a:	4b3f      	ldr	r3, [pc, #252]	; (8001928 <HAL_RCC_OscConfig+0x2b0>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001830:	f7ff fb1a 	bl	8000e68 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001838:	f7ff fb16 	bl	8000e68 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e14d      	b.n	8001ae6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800184a:	4b36      	ldr	r3, [pc, #216]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f0      	bne.n	8001838 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	2b00      	cmp	r3, #0
 8001860:	d030      	beq.n	80018c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d016      	beq.n	8001898 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800186a:	4b30      	ldr	r3, [pc, #192]	; (800192c <HAL_RCC_OscConfig+0x2b4>)
 800186c:	2201      	movs	r2, #1
 800186e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001870:	f7ff fafa 	bl	8000e68 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001878:	f7ff faf6 	bl	8000e68 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e12d      	b.n	8001ae6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800188a:	4b26      	ldr	r3, [pc, #152]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 800188c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0x200>
 8001896:	e015      	b.n	80018c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001898:	4b24      	ldr	r3, [pc, #144]	; (800192c <HAL_RCC_OscConfig+0x2b4>)
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189e:	f7ff fae3 	bl	8000e68 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018a6:	f7ff fadf 	bl	8000e68 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e116      	b.n	8001ae6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b8:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80018ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1f0      	bne.n	80018a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 80a0 	beq.w	8001a12 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018d6:	4b13      	ldr	r3, [pc, #76]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10f      	bne.n	8001902 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	4a0e      	ldr	r2, [pc, #56]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f0:	6413      	str	r3, [r2, #64]	; 0x40
 80018f2:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <HAL_RCC_OscConfig+0x2ac>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018fe:	2301      	movs	r3, #1
 8001900:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_RCC_OscConfig+0x2b8>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190a:	2b00      	cmp	r3, #0
 800190c:	d121      	bne.n	8001952 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <HAL_RCC_OscConfig+0x2b8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a07      	ldr	r2, [pc, #28]	; (8001930 <HAL_RCC_OscConfig+0x2b8>)
 8001914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800191a:	f7ff faa5 	bl	8000e68 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001920:	e011      	b.n	8001946 <HAL_RCC_OscConfig+0x2ce>
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800
 8001928:	42470000 	.word	0x42470000
 800192c:	42470e80 	.word	0x42470e80
 8001930:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001934:	f7ff fa98 	bl	8000e68 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e0cf      	b.n	8001ae6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001946:	4b6a      	ldr	r3, [pc, #424]	; (8001af0 <HAL_RCC_OscConfig+0x478>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d106      	bne.n	8001968 <HAL_RCC_OscConfig+0x2f0>
 800195a:	4b66      	ldr	r3, [pc, #408]	; (8001af4 <HAL_RCC_OscConfig+0x47c>)
 800195c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195e:	4a65      	ldr	r2, [pc, #404]	; (8001af4 <HAL_RCC_OscConfig+0x47c>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6713      	str	r3, [r2, #112]	; 0x70
 8001966:	e01c      	b.n	80019a2 <HAL_RCC_OscConfig+0x32a>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2b05      	cmp	r3, #5
 800196e:	d10c      	bne.n	800198a <HAL_RCC_OscConfig+0x312>
 8001970:	4b60      	ldr	r3, [pc, #384]	; (8001af4 <HAL_RCC_OscConfig+0x47c>)
 8001972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001974:	4a5f      	ldr	r2, [pc, #380]	; (8001af4 <HAL_RCC_OscConfig+0x47c>)
 8001976:	f043 0304 	orr.w	r3, r3, #4
 800197a:	6713      	str	r3, [r2, #112]	; 0x70
 800197c:	4b5d      	ldr	r3, [pc, #372]	; (8001af4 <HAL_RCC_OscConfig+0x47c>)
 800197e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001980:	4a5c      	ldr	r2, [pc, #368]	; (8001af4 <HAL_RCC_OscConfig+0x47c>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	6713      	str	r3, [r2, #112]	; 0x70
 8001988:	e00b      	b.n	80019a2 <HAL_RCC_OscConfig+0x32a>
 800198a:	4b5a      	ldr	r3, [pc, #360]	; (8001af4 <HAL_RCC_OscConfig+0x47c>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198e:	4a59      	ldr	r2, [pc, #356]	; (8001af4 <HAL_RCC_OscConfig+0x47c>)
 8001990:	f023 0301 	bic.w	r3, r3, #1
 8001994:	6713      	str	r3, [r2, #112]	; 0x70
 8001996:	4b57      	ldr	r3, [pc, #348]	; (8001af4 <HAL_RCC_OscConfig+0x47c>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199a:	4a56      	ldr	r2, [pc, #344]	; (8001af4 <HAL_RCC_OscConfig+0x47c>)
 800199c:	f023 0304 	bic.w	r3, r3, #4
 80019a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d015      	beq.n	80019d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019aa:	f7ff fa5d 	bl	8000e68 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b0:	e00a      	b.n	80019c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019b2:	f7ff fa59 	bl	8000e68 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e08e      	b.n	8001ae6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c8:	4b4a      	ldr	r3, [pc, #296]	; (8001af4 <HAL_RCC_OscConfig+0x47c>)
 80019ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0ee      	beq.n	80019b2 <HAL_RCC_OscConfig+0x33a>
 80019d4:	e014      	b.n	8001a00 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d6:	f7ff fa47 	bl	8000e68 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019dc:	e00a      	b.n	80019f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019de:	f7ff fa43 	bl	8000e68 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e078      	b.n	8001ae6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f4:	4b3f      	ldr	r3, [pc, #252]	; (8001af4 <HAL_RCC_OscConfig+0x47c>)
 80019f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1ee      	bne.n	80019de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a00:	7dfb      	ldrb	r3, [r7, #23]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d105      	bne.n	8001a12 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a06:	4b3b      	ldr	r3, [pc, #236]	; (8001af4 <HAL_RCC_OscConfig+0x47c>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	4a3a      	ldr	r2, [pc, #232]	; (8001af4 <HAL_RCC_OscConfig+0x47c>)
 8001a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d064      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a1a:	4b36      	ldr	r3, [pc, #216]	; (8001af4 <HAL_RCC_OscConfig+0x47c>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
 8001a22:	2b08      	cmp	r3, #8
 8001a24:	d05c      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d141      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2e:	4b32      	ldr	r3, [pc, #200]	; (8001af8 <HAL_RCC_OscConfig+0x480>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a34:	f7ff fa18 	bl	8000e68 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a3c:	f7ff fa14 	bl	8000e68 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e04b      	b.n	8001ae6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4e:	4b29      	ldr	r3, [pc, #164]	; (8001af4 <HAL_RCC_OscConfig+0x47c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69da      	ldr	r2, [r3, #28]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a68:	019b      	lsls	r3, r3, #6
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a70:	085b      	lsrs	r3, r3, #1
 8001a72:	3b01      	subs	r3, #1
 8001a74:	041b      	lsls	r3, r3, #16
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7c:	061b      	lsls	r3, r3, #24
 8001a7e:	491d      	ldr	r1, [pc, #116]	; (8001af4 <HAL_RCC_OscConfig+0x47c>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a84:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <HAL_RCC_OscConfig+0x480>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8a:	f7ff f9ed 	bl	8000e68 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a92:	f7ff f9e9 	bl	8000e68 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e020      	b.n	8001ae6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa4:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <HAL_RCC_OscConfig+0x47c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0f0      	beq.n	8001a92 <HAL_RCC_OscConfig+0x41a>
 8001ab0:	e018      	b.n	8001ae4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab2:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <HAL_RCC_OscConfig+0x480>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab8:	f7ff f9d6 	bl	8000e68 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac0:	f7ff f9d2 	bl	8000e68 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e009      	b.n	8001ae6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad2:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <HAL_RCC_OscConfig+0x47c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f0      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x448>
 8001ade:	e001      	b.n	8001ae4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e000      	b.n	8001ae6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40007000 	.word	0x40007000
 8001af4:	40023800 	.word	0x40023800
 8001af8:	42470060 	.word	0x42470060

08001afc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e0ca      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b10:	4b67      	ldr	r3, [pc, #412]	; (8001cb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 030f 	and.w	r3, r3, #15
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d90c      	bls.n	8001b38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1e:	4b64      	ldr	r3, [pc, #400]	; (8001cb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b26:	4b62      	ldr	r3, [pc, #392]	; (8001cb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d001      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0b6      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d020      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b50:	4b58      	ldr	r3, [pc, #352]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	4a57      	ldr	r2, [pc, #348]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b68:	4b52      	ldr	r3, [pc, #328]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	4a51      	ldr	r2, [pc, #324]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b74:	4b4f      	ldr	r3, [pc, #316]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	494c      	ldr	r1, [pc, #304]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d044      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d107      	bne.n	8001baa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9a:	4b46      	ldr	r3, [pc, #280]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d119      	bne.n	8001bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e07d      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d003      	beq.n	8001bba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	d107      	bne.n	8001bca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bba:	4b3e      	ldr	r3, [pc, #248]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d109      	bne.n	8001bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e06d      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bca:	4b3a      	ldr	r3, [pc, #232]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e065      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bda:	4b36      	ldr	r3, [pc, #216]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f023 0203 	bic.w	r2, r3, #3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	4933      	ldr	r1, [pc, #204]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bec:	f7ff f93c 	bl	8000e68 <HAL_GetTick>
 8001bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf2:	e00a      	b.n	8001c0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf4:	f7ff f938 	bl	8000e68 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e04d      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0a:	4b2a      	ldr	r3, [pc, #168]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 020c 	and.w	r2, r3, #12
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d1eb      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c1c:	4b24      	ldr	r3, [pc, #144]	; (8001cb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 030f 	and.w	r3, r3, #15
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d20c      	bcs.n	8001c44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2a:	4b21      	ldr	r3, [pc, #132]	; (8001cb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c32:	4b1f      	ldr	r3, [pc, #124]	; (8001cb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e030      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d008      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c50:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	4915      	ldr	r1, [pc, #84]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d009      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	490d      	ldr	r1, [pc, #52]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c82:	f000 f81d 	bl	8001cc0 <HAL_RCC_GetSysClockFreq>
 8001c86:	4601      	mov	r1, r0
 8001c88:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	091b      	lsrs	r3, r3, #4
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	4a09      	ldr	r2, [pc, #36]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c94:	5cd3      	ldrb	r3, [r2, r3]
 8001c96:	fa21 f303 	lsr.w	r3, r1, r3
 8001c9a:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f7ff f89e 	bl	8000de0 <HAL_InitTick>

  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40023c00 	.word	0x40023c00
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	0800515c 	.word	0x0800515c
 8001cbc:	2000000c 	.word	0x2000000c

08001cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	607b      	str	r3, [r7, #4]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cd6:	4b63      	ldr	r3, [pc, #396]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	d007      	beq.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x32>
 8001ce2:	2b08      	cmp	r3, #8
 8001ce4:	d008      	beq.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x38>
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f040 80b4 	bne.w	8001e54 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cec:	4b5e      	ldr	r3, [pc, #376]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001cee:	60bb      	str	r3, [r7, #8]
       break;
 8001cf0:	e0b3      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cf2:	4b5e      	ldr	r3, [pc, #376]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001cf4:	60bb      	str	r3, [r7, #8]
      break;
 8001cf6:	e0b0      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cf8:	4b5a      	ldr	r3, [pc, #360]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d00:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d02:	4b58      	ldr	r3, [pc, #352]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d04a      	beq.n	8001da4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d0e:	4b55      	ldr	r3, [pc, #340]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	099b      	lsrs	r3, r3, #6
 8001d14:	f04f 0400 	mov.w	r4, #0
 8001d18:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	ea03 0501 	and.w	r5, r3, r1
 8001d24:	ea04 0602 	and.w	r6, r4, r2
 8001d28:	4629      	mov	r1, r5
 8001d2a:	4632      	mov	r2, r6
 8001d2c:	f04f 0300 	mov.w	r3, #0
 8001d30:	f04f 0400 	mov.w	r4, #0
 8001d34:	0154      	lsls	r4, r2, #5
 8001d36:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d3a:	014b      	lsls	r3, r1, #5
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4622      	mov	r2, r4
 8001d40:	1b49      	subs	r1, r1, r5
 8001d42:	eb62 0206 	sbc.w	r2, r2, r6
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	f04f 0400 	mov.w	r4, #0
 8001d4e:	0194      	lsls	r4, r2, #6
 8001d50:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d54:	018b      	lsls	r3, r1, #6
 8001d56:	1a5b      	subs	r3, r3, r1
 8001d58:	eb64 0402 	sbc.w	r4, r4, r2
 8001d5c:	f04f 0100 	mov.w	r1, #0
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	00e2      	lsls	r2, r4, #3
 8001d66:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d6a:	00d9      	lsls	r1, r3, #3
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4614      	mov	r4, r2
 8001d70:	195b      	adds	r3, r3, r5
 8001d72:	eb44 0406 	adc.w	r4, r4, r6
 8001d76:	f04f 0100 	mov.w	r1, #0
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	0262      	lsls	r2, r4, #9
 8001d80:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001d84:	0259      	lsls	r1, r3, #9
 8001d86:	460b      	mov	r3, r1
 8001d88:	4614      	mov	r4, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	4621      	mov	r1, r4
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f04f 0400 	mov.w	r4, #0
 8001d94:	461a      	mov	r2, r3
 8001d96:	4623      	mov	r3, r4
 8001d98:	f7fe fe80 	bl	8000a9c <__aeabi_uldivmod>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	460c      	mov	r4, r1
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	e049      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001da4:	4b2f      	ldr	r3, [pc, #188]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	099b      	lsrs	r3, r3, #6
 8001daa:	f04f 0400 	mov.w	r4, #0
 8001dae:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001db2:	f04f 0200 	mov.w	r2, #0
 8001db6:	ea03 0501 	and.w	r5, r3, r1
 8001dba:	ea04 0602 	and.w	r6, r4, r2
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	4632      	mov	r2, r6
 8001dc2:	f04f 0300 	mov.w	r3, #0
 8001dc6:	f04f 0400 	mov.w	r4, #0
 8001dca:	0154      	lsls	r4, r2, #5
 8001dcc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001dd0:	014b      	lsls	r3, r1, #5
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4622      	mov	r2, r4
 8001dd6:	1b49      	subs	r1, r1, r5
 8001dd8:	eb62 0206 	sbc.w	r2, r2, r6
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	f04f 0400 	mov.w	r4, #0
 8001de4:	0194      	lsls	r4, r2, #6
 8001de6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001dea:	018b      	lsls	r3, r1, #6
 8001dec:	1a5b      	subs	r3, r3, r1
 8001dee:	eb64 0402 	sbc.w	r4, r4, r2
 8001df2:	f04f 0100 	mov.w	r1, #0
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	00e2      	lsls	r2, r4, #3
 8001dfc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e00:	00d9      	lsls	r1, r3, #3
 8001e02:	460b      	mov	r3, r1
 8001e04:	4614      	mov	r4, r2
 8001e06:	195b      	adds	r3, r3, r5
 8001e08:	eb44 0406 	adc.w	r4, r4, r6
 8001e0c:	f04f 0100 	mov.w	r1, #0
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	02a2      	lsls	r2, r4, #10
 8001e16:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001e1a:	0299      	lsls	r1, r3, #10
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4614      	mov	r4, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	4621      	mov	r1, r4
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f04f 0400 	mov.w	r4, #0
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	4623      	mov	r3, r4
 8001e2e:	f7fe fe35 	bl	8000a9c <__aeabi_uldivmod>
 8001e32:	4603      	mov	r3, r0
 8001e34:	460c      	mov	r4, r1
 8001e36:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e38:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	0c1b      	lsrs	r3, r3, #16
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	3301      	adds	r3, #1
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e50:	60bb      	str	r3, [r7, #8]
      break;
 8001e52:	e002      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e54:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001e56:	60bb      	str	r3, [r7, #8]
      break;
 8001e58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e5a:	68bb      	ldr	r3, [r7, #8]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e64:	40023800 	.word	0x40023800
 8001e68:	00f42400 	.word	0x00f42400
 8001e6c:	007a1200 	.word	0x007a1200

08001e70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e74:	4b03      	ldr	r3, [pc, #12]	; (8001e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e76:	681b      	ldr	r3, [r3, #0]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	2000000c 	.word	0x2000000c

08001e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e8c:	f7ff fff0 	bl	8001e70 <HAL_RCC_GetHCLKFreq>
 8001e90:	4601      	mov	r1, r0
 8001e92:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	0a9b      	lsrs	r3, r3, #10
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	4a03      	ldr	r2, [pc, #12]	; (8001eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ea0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	0800516c 	.word	0x0800516c

08001eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001eb4:	f7ff ffdc 	bl	8001e70 <HAL_RCC_GetHCLKFreq>
 8001eb8:	4601      	mov	r1, r0
 8001eba:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	0b5b      	lsrs	r3, r3, #13
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	4a03      	ldr	r2, [pc, #12]	; (8001ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ec6:	5cd3      	ldrb	r3, [r2, r3]
 8001ec8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	0800516c 	.word	0x0800516c

08001ed8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d105      	bne.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d035      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001f00:	4b62      	ldr	r3, [pc, #392]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f06:	f7fe ffaf 	bl	8000e68 <HAL_GetTick>
 8001f0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001f0e:	f7fe ffab 	bl	8000e68 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e0b0      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f20:	4b5b      	ldr	r3, [pc, #364]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1f0      	bne.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	019a      	lsls	r2, r3, #6
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	071b      	lsls	r3, r3, #28
 8001f38:	4955      	ldr	r1, [pc, #340]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001f40:	4b52      	ldr	r3, [pc, #328]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f46:	f7fe ff8f 	bl	8000e68 <HAL_GetTick>
 8001f4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001f4e:	f7fe ff8b 	bl	8000e68 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e090      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f60:	4b4b      	ldr	r3, [pc, #300]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0f0      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 8083 	beq.w	8002080 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	4b44      	ldr	r3, [pc, #272]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	4a43      	ldr	r2, [pc, #268]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f88:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8a:	4b41      	ldr	r3, [pc, #260]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001f96:	4b3f      	ldr	r3, [pc, #252]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a3e      	ldr	r2, [pc, #248]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001fa2:	f7fe ff61 	bl	8000e68 <HAL_GetTick>
 8001fa6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001faa:	f7fe ff5d 	bl	8000e68 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e062      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001fbc:	4b35      	ldr	r3, [pc, #212]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fc8:	4b31      	ldr	r3, [pc, #196]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fd0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d02f      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d028      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fe6:	4b2a      	ldr	r3, [pc, #168]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ff0:	4b29      	ldr	r3, [pc, #164]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ff6:	4b28      	ldr	r3, [pc, #160]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001ffc:	4a24      	ldr	r2, [pc, #144]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002002:	4b23      	ldr	r3, [pc, #140]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b01      	cmp	r3, #1
 800200c:	d114      	bne.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800200e:	f7fe ff2b 	bl	8000e68 <HAL_GetTick>
 8002012:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002014:	e00a      	b.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002016:	f7fe ff27 	bl	8000e68 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	f241 3288 	movw	r2, #5000	; 0x1388
 8002024:	4293      	cmp	r3, r2
 8002026:	d901      	bls.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e02a      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202c:	4b18      	ldr	r3, [pc, #96]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800202e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0ee      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002040:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002044:	d10d      	bne.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002046:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800205a:	490d      	ldr	r1, [pc, #52]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800205c:	4313      	orrs	r3, r2
 800205e:	608b      	str	r3, [r1, #8]
 8002060:	e005      	b.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002062:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002068:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800206c:	6093      	str	r3, [r2, #8]
 800206e:	4b08      	ldr	r3, [pc, #32]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002070:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800207a:	4905      	ldr	r1, [pc, #20]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800207c:	4313      	orrs	r3, r2
 800207e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	42470068 	.word	0x42470068
 8002090:	40023800 	.word	0x40023800
 8002094:	40007000 	.word	0x40007000
 8002098:	42470e40 	.word	0x42470e40

0800209c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e083      	b.n	80021b6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	7f5b      	ldrb	r3, [r3, #29]
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d105      	bne.n	80020c4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f002 fa38 	bl	8004534 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2202      	movs	r2, #2
 80020c8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	22ca      	movs	r2, #202	; 0xca
 80020d0:	625a      	str	r2, [r3, #36]	; 0x24
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2253      	movs	r2, #83	; 0x53
 80020d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 faa8 	bl	8002630 <RTC_EnterInitMode>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d008      	beq.n	80020f8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	22ff      	movs	r2, #255	; 0xff
 80020ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2204      	movs	r2, #4
 80020f2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e05e      	b.n	80021b6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6812      	ldr	r2, [r2, #0]
 8002102:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800210a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6899      	ldr	r1, [r3, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	431a      	orrs	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	68d2      	ldr	r2, [r2, #12]
 8002132:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6919      	ldr	r1, [r3, #16]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	041a      	lsls	r2, r3, #16
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002156:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 0320 	and.w	r3, r3, #32
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10e      	bne.n	8002184 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 fa3a 	bl	80025e0 <HAL_RTC_WaitForSynchro>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d008      	beq.n	8002184 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	22ff      	movs	r2, #255	; 0xff
 8002178:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2204      	movs	r2, #4
 800217e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e018      	b.n	80021b6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002192:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	699a      	ldr	r2, [r3, #24]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	22ff      	movs	r2, #255	; 0xff
 80021ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80021b4:	2300      	movs	r3, #0
  }
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80021be:	b590      	push	{r4, r7, lr}
 80021c0:	b087      	sub	sp, #28
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	7f1b      	ldrb	r3, [r3, #28]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_RTC_SetTime+0x1c>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e0aa      	b.n	8002330 <HAL_RTC_SetTime+0x172>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2201      	movs	r2, #1
 80021de:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2202      	movs	r2, #2
 80021e4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d126      	bne.n	800223a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d102      	bne.n	8002200 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2200      	movs	r2, #0
 80021fe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f000 fa3f 	bl	8002688 <RTC_ByteToBcd2>
 800220a:	4603      	mov	r3, r0
 800220c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	785b      	ldrb	r3, [r3, #1]
 8002212:	4618      	mov	r0, r3
 8002214:	f000 fa38 	bl	8002688 <RTC_ByteToBcd2>
 8002218:	4603      	mov	r3, r0
 800221a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800221c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	789b      	ldrb	r3, [r3, #2]
 8002222:	4618      	mov	r0, r3
 8002224:	f000 fa30 	bl	8002688 <RTC_ByteToBcd2>
 8002228:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800222a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	78db      	ldrb	r3, [r3, #3]
 8002232:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002234:	4313      	orrs	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	e018      	b.n	800226c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002244:	2b00      	cmp	r3, #0
 8002246:	d102      	bne.n	800224e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2200      	movs	r2, #0
 800224c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	785b      	ldrb	r3, [r3, #1]
 8002258:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800225a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002260:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	78db      	ldrb	r3, [r3, #3]
 8002266:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002268:	4313      	orrs	r3, r2
 800226a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	22ca      	movs	r2, #202	; 0xca
 8002272:	625a      	str	r2, [r3, #36]	; 0x24
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2253      	movs	r2, #83	; 0x53
 800227a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 f9d7 	bl	8002630 <RTC_EnterInitMode>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00b      	beq.n	80022a0 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	22ff      	movs	r2, #255	; 0xff
 800228e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2204      	movs	r2, #4
 8002294:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e047      	b.n	8002330 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80022aa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80022ae:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022be:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6899      	ldr	r1, [r3, #8]
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	431a      	orrs	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022e6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 0320 	and.w	r3, r3, #32
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d111      	bne.n	800231a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 f972 	bl	80025e0 <HAL_RTC_WaitForSynchro>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00b      	beq.n	800231a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	22ff      	movs	r2, #255	; 0xff
 8002308:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2204      	movs	r2, #4
 800230e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e00a      	b.n	8002330 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	22ff      	movs	r2, #255	; 0xff
 8002320:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2201      	movs	r2, #1
 8002326:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800232e:	2300      	movs	r3, #0
  }
}
 8002330:	4618      	mov	r0, r3
 8002332:	371c      	adds	r7, #28
 8002334:	46bd      	mov	sp, r7
 8002336:	bd90      	pop	{r4, r7, pc}

08002338 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800236a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800236e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	0c1b      	lsrs	r3, r3, #16
 8002374:	b2db      	uxtb	r3, r3
 8002376:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800237a:	b2da      	uxtb	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	0a1b      	lsrs	r3, r3, #8
 8002384:	b2db      	uxtb	r3, r3
 8002386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800238a:	b2da      	uxtb	r2, r3
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002398:	b2da      	uxtb	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	0c1b      	lsrs	r3, r3, #16
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d11a      	bne.n	80023ea <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 f983 	bl	80026c4 <RTC_Bcd2ToByte>
 80023be:	4603      	mov	r3, r0
 80023c0:	461a      	mov	r2, r3
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	785b      	ldrb	r3, [r3, #1]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 f97a 	bl	80026c4 <RTC_Bcd2ToByte>
 80023d0:	4603      	mov	r3, r0
 80023d2:	461a      	mov	r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	789b      	ldrb	r3, [r3, #2]
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 f971 	bl	80026c4 <RTC_Bcd2ToByte>
 80023e2:	4603      	mov	r3, r0
 80023e4:	461a      	mov	r2, r3
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80023f4:	b590      	push	{r4, r7, lr}
 80023f6:	b087      	sub	sp, #28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	7f1b      	ldrb	r3, [r3, #28]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_RTC_SetDate+0x1c>
 800240c:	2302      	movs	r3, #2
 800240e:	e094      	b.n	800253a <HAL_RTC_SetDate+0x146>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2201      	movs	r2, #1
 8002414:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2202      	movs	r2, #2
 800241a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10e      	bne.n	8002440 <HAL_RTC_SetDate+0x4c>
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	785b      	ldrb	r3, [r3, #1]
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	2b00      	cmp	r3, #0
 800242c:	d008      	beq.n	8002440 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	785b      	ldrb	r3, [r3, #1]
 8002432:	f023 0310 	bic.w	r3, r3, #16
 8002436:	b2db      	uxtb	r3, r3
 8002438:	330a      	adds	r3, #10
 800243a:	b2da      	uxtb	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d11c      	bne.n	8002480 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	78db      	ldrb	r3, [r3, #3]
 800244a:	4618      	mov	r0, r3
 800244c:	f000 f91c 	bl	8002688 <RTC_ByteToBcd2>
 8002450:	4603      	mov	r3, r0
 8002452:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	785b      	ldrb	r3, [r3, #1]
 8002458:	4618      	mov	r0, r3
 800245a:	f000 f915 	bl	8002688 <RTC_ByteToBcd2>
 800245e:	4603      	mov	r3, r0
 8002460:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002462:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	789b      	ldrb	r3, [r3, #2]
 8002468:	4618      	mov	r0, r3
 800246a:	f000 f90d 	bl	8002688 <RTC_ByteToBcd2>
 800246e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002470:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800247a:	4313      	orrs	r3, r2
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	e00e      	b.n	800249e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	78db      	ldrb	r3, [r3, #3]
 8002484:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	785b      	ldrb	r3, [r3, #1]
 800248a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800248c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002492:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800249a:	4313      	orrs	r3, r2
 800249c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	22ca      	movs	r2, #202	; 0xca
 80024a4:	625a      	str	r2, [r3, #36]	; 0x24
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2253      	movs	r2, #83	; 0x53
 80024ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 f8be 	bl	8002630 <RTC_EnterInitMode>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00b      	beq.n	80024d2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	22ff      	movs	r2, #255	; 0xff
 80024c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2204      	movs	r2, #4
 80024c6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e033      	b.n	800253a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80024dc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80024e0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024f0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 0320 	and.w	r3, r3, #32
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d111      	bne.n	8002524 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 f86d 	bl	80025e0 <HAL_RTC_WaitForSynchro>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00b      	beq.n	8002524 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	22ff      	movs	r2, #255	; 0xff
 8002512:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2204      	movs	r2, #4
 8002518:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e00a      	b.n	800253a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	22ff      	movs	r2, #255	; 0xff
 800252a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2201      	movs	r2, #1
 8002530:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002538:	2300      	movs	r3, #0
  }
}
 800253a:	4618      	mov	r0, r3
 800253c:	371c      	adds	r7, #28
 800253e:	46bd      	mov	sp, r7
 8002540:	bd90      	pop	{r4, r7, pc}

08002542 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b086      	sub	sp, #24
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800255c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002560:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	0c1b      	lsrs	r3, r3, #16
 8002566:	b2da      	uxtb	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	0a1b      	lsrs	r3, r3, #8
 8002570:	b2db      	uxtb	r3, r3
 8002572:	f003 031f 	and.w	r3, r3, #31
 8002576:	b2da      	uxtb	r2, r3
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	b2db      	uxtb	r3, r3
 8002580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002584:	b2da      	uxtb	r2, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	0b5b      	lsrs	r3, r3, #13
 800258e:	b2db      	uxtb	r3, r3
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	b2da      	uxtb	r2, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d11a      	bne.n	80025d6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	78db      	ldrb	r3, [r3, #3]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 f88d 	bl	80026c4 <RTC_Bcd2ToByte>
 80025aa:	4603      	mov	r3, r0
 80025ac:	461a      	mov	r2, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	785b      	ldrb	r3, [r3, #1]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 f884 	bl	80026c4 <RTC_Bcd2ToByte>
 80025bc:	4603      	mov	r3, r0
 80025be:	461a      	mov	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	789b      	ldrb	r3, [r3, #2]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 f87b 	bl	80026c4 <RTC_Bcd2ToByte>
 80025ce:	4603      	mov	r3, r0
 80025d0:	461a      	mov	r2, r3
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80025fa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025fc:	f7fe fc34 	bl	8000e68 <HAL_GetTick>
 8002600:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002602:	e009      	b.n	8002618 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002604:	f7fe fc30 	bl	8000e68 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002612:	d901      	bls.n	8002618 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e007      	b.n	8002628 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f003 0320 	and.w	r3, r3, #32
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0ee      	beq.n	8002604 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002646:	2b00      	cmp	r3, #0
 8002648:	d119      	bne.n	800267e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f04f 32ff 	mov.w	r2, #4294967295
 8002652:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002654:	f7fe fc08 	bl	8000e68 <HAL_GetTick>
 8002658:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800265a:	e009      	b.n	8002670 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800265c:	f7fe fc04 	bl	8000e68 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800266a:	d901      	bls.n	8002670 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e007      	b.n	8002680 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0ee      	beq.n	800265c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8002696:	e005      	b.n	80026a4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	3301      	adds	r3, #1
 800269c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	3b0a      	subs	r3, #10
 80026a2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	2b09      	cmp	r3, #9
 80026a8:	d8f6      	bhi.n	8002698 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	011b      	lsls	r3, r3, #4
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	b2db      	uxtb	r3, r3
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	461a      	mov	r2, r3
 80026da:	4613      	mov	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	4413      	add	r3, r2
 80026f2:	b2db      	uxtb	r3, r3
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e056      	b.n	80027c0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d106      	bne.n	8002732 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f001 ff17 	bl	8004560 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2202      	movs	r2, #2
 8002736:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002748:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	431a      	orrs	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	ea42 0103 	orr.w	r1, r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	0c1b      	lsrs	r3, r3, #16
 8002790:	f003 0104 	and.w	r1, r3, #4
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	69da      	ldr	r2, [r3, #28]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e01d      	b.n	8002816 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d106      	bne.n	80027f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f001 fefe 	bl	80045f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3304      	adds	r3, #4
 8002804:	4619      	mov	r1, r3
 8002806:	4610      	mov	r0, r2
 8002808:	f000 f9fa 	bl	8002c00 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e01d      	b.n	800286c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d106      	bne.n	800284a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f815 	bl	8002874 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2202      	movs	r2, #2
 800284e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3304      	adds	r3, #4
 800285a:	4619      	mov	r1, r3
 800285c:	4610      	mov	r0, r2
 800285e:	f000 f9cf 	bl	8002c00 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2201      	movs	r2, #1
 8002898:	6839      	ldr	r1, [r7, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f000 fc9a 	bl	80031d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a15      	ldr	r2, [pc, #84]	; (80028fc <HAL_TIM_PWM_Start+0x74>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d004      	beq.n	80028b4 <HAL_TIM_PWM_Start+0x2c>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a14      	ldr	r2, [pc, #80]	; (8002900 <HAL_TIM_PWM_Start+0x78>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d101      	bne.n	80028b8 <HAL_TIM_PWM_Start+0x30>
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <HAL_TIM_PWM_Start+0x32>
 80028b8:	2300      	movs	r3, #0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d007      	beq.n	80028ce <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2b06      	cmp	r3, #6
 80028de:	d007      	beq.n	80028f0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0201 	orr.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40010000 	.word	0x40010000
 8002900:	40010400 	.word	0x40010400

08002904 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800291a:	2302      	movs	r3, #2
 800291c:	e0b4      	b.n	8002a88 <HAL_TIM_PWM_ConfigChannel+0x184>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2202      	movs	r2, #2
 800292a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b0c      	cmp	r3, #12
 8002932:	f200 809f 	bhi.w	8002a74 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002936:	a201      	add	r2, pc, #4	; (adr r2, 800293c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293c:	08002971 	.word	0x08002971
 8002940:	08002a75 	.word	0x08002a75
 8002944:	08002a75 	.word	0x08002a75
 8002948:	08002a75 	.word	0x08002a75
 800294c:	080029b1 	.word	0x080029b1
 8002950:	08002a75 	.word	0x08002a75
 8002954:	08002a75 	.word	0x08002a75
 8002958:	08002a75 	.word	0x08002a75
 800295c:	080029f3 	.word	0x080029f3
 8002960:	08002a75 	.word	0x08002a75
 8002964:	08002a75 	.word	0x08002a75
 8002968:	08002a75 	.word	0x08002a75
 800296c:	08002a33 	.word	0x08002a33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68b9      	ldr	r1, [r7, #8]
 8002976:	4618      	mov	r0, r3
 8002978:	f000 f9e2 	bl	8002d40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699a      	ldr	r2, [r3, #24]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0208 	orr.w	r2, r2, #8
 800298a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699a      	ldr	r2, [r3, #24]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0204 	bic.w	r2, r2, #4
 800299a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6999      	ldr	r1, [r3, #24]
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	691a      	ldr	r2, [r3, #16]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	619a      	str	r2, [r3, #24]
      break;
 80029ae:	e062      	b.n	8002a76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68b9      	ldr	r1, [r7, #8]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fa32 	bl	8002e20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699a      	ldr	r2, [r3, #24]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	699a      	ldr	r2, [r3, #24]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6999      	ldr	r1, [r3, #24]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	021a      	lsls	r2, r3, #8
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	619a      	str	r2, [r3, #24]
      break;
 80029f0:	e041      	b.n	8002a76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68b9      	ldr	r1, [r7, #8]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 fa87 	bl	8002f0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	69da      	ldr	r2, [r3, #28]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0208 	orr.w	r2, r2, #8
 8002a0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	69da      	ldr	r2, [r3, #28]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0204 	bic.w	r2, r2, #4
 8002a1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	69d9      	ldr	r1, [r3, #28]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	61da      	str	r2, [r3, #28]
      break;
 8002a30:	e021      	b.n	8002a76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68b9      	ldr	r1, [r7, #8]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 fadb 	bl	8002ff4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	69da      	ldr	r2, [r3, #28]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	69da      	ldr	r2, [r3, #28]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	69d9      	ldr	r1, [r3, #28]
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	021a      	lsls	r2, r3, #8
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	61da      	str	r2, [r3, #28]
      break;
 8002a72:	e000      	b.n	8002a76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002a74:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <HAL_TIM_ConfigClockSource+0x18>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e0a6      	b.n	8002bf6 <HAL_TIM_ConfigClockSource+0x166>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ac6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ace:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b40      	cmp	r3, #64	; 0x40
 8002ade:	d067      	beq.n	8002bb0 <HAL_TIM_ConfigClockSource+0x120>
 8002ae0:	2b40      	cmp	r3, #64	; 0x40
 8002ae2:	d80b      	bhi.n	8002afc <HAL_TIM_ConfigClockSource+0x6c>
 8002ae4:	2b10      	cmp	r3, #16
 8002ae6:	d073      	beq.n	8002bd0 <HAL_TIM_ConfigClockSource+0x140>
 8002ae8:	2b10      	cmp	r3, #16
 8002aea:	d802      	bhi.n	8002af2 <HAL_TIM_ConfigClockSource+0x62>
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d06f      	beq.n	8002bd0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002af0:	e078      	b.n	8002be4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002af2:	2b20      	cmp	r3, #32
 8002af4:	d06c      	beq.n	8002bd0 <HAL_TIM_ConfigClockSource+0x140>
 8002af6:	2b30      	cmp	r3, #48	; 0x30
 8002af8:	d06a      	beq.n	8002bd0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002afa:	e073      	b.n	8002be4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002afc:	2b70      	cmp	r3, #112	; 0x70
 8002afe:	d00d      	beq.n	8002b1c <HAL_TIM_ConfigClockSource+0x8c>
 8002b00:	2b70      	cmp	r3, #112	; 0x70
 8002b02:	d804      	bhi.n	8002b0e <HAL_TIM_ConfigClockSource+0x7e>
 8002b04:	2b50      	cmp	r3, #80	; 0x50
 8002b06:	d033      	beq.n	8002b70 <HAL_TIM_ConfigClockSource+0xe0>
 8002b08:	2b60      	cmp	r3, #96	; 0x60
 8002b0a:	d041      	beq.n	8002b90 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002b0c:	e06a      	b.n	8002be4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b12:	d066      	beq.n	8002be2 <HAL_TIM_ConfigClockSource+0x152>
 8002b14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b18:	d017      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002b1a:	e063      	b.n	8002be4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6818      	ldr	r0, [r3, #0]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	6899      	ldr	r1, [r3, #8]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f000 fb32 	bl	8003194 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b3e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	609a      	str	r2, [r3, #8]
      break;
 8002b48:	e04c      	b.n	8002be4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6899      	ldr	r1, [r3, #8]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f000 fb1b 	bl	8003194 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b6c:	609a      	str	r2, [r3, #8]
      break;
 8002b6e:	e039      	b.n	8002be4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6818      	ldr	r0, [r3, #0]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	6859      	ldr	r1, [r3, #4]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	f000 fa8f 	bl	80030a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2150      	movs	r1, #80	; 0x50
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f000 fae8 	bl	800315e <TIM_ITRx_SetConfig>
      break;
 8002b8e:	e029      	b.n	8002be4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6818      	ldr	r0, [r3, #0]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	6859      	ldr	r1, [r3, #4]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	f000 faae 	bl	80030fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2160      	movs	r1, #96	; 0x60
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 fad8 	bl	800315e <TIM_ITRx_SetConfig>
      break;
 8002bae:	e019      	b.n	8002be4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6818      	ldr	r0, [r3, #0]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	6859      	ldr	r1, [r3, #4]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	f000 fa6f 	bl	80030a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2140      	movs	r1, #64	; 0x40
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f000 fac8 	bl	800315e <TIM_ITRx_SetConfig>
      break;
 8002bce:	e009      	b.n	8002be4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4610      	mov	r0, r2
 8002bdc:	f000 fabf 	bl	800315e <TIM_ITRx_SetConfig>
      break;
 8002be0:	e000      	b.n	8002be4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002be2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a40      	ldr	r2, [pc, #256]	; (8002d14 <TIM_Base_SetConfig+0x114>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d013      	beq.n	8002c40 <TIM_Base_SetConfig+0x40>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c1e:	d00f      	beq.n	8002c40 <TIM_Base_SetConfig+0x40>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a3d      	ldr	r2, [pc, #244]	; (8002d18 <TIM_Base_SetConfig+0x118>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d00b      	beq.n	8002c40 <TIM_Base_SetConfig+0x40>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a3c      	ldr	r2, [pc, #240]	; (8002d1c <TIM_Base_SetConfig+0x11c>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d007      	beq.n	8002c40 <TIM_Base_SetConfig+0x40>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a3b      	ldr	r2, [pc, #236]	; (8002d20 <TIM_Base_SetConfig+0x120>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d003      	beq.n	8002c40 <TIM_Base_SetConfig+0x40>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a3a      	ldr	r2, [pc, #232]	; (8002d24 <TIM_Base_SetConfig+0x124>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d108      	bne.n	8002c52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a2f      	ldr	r2, [pc, #188]	; (8002d14 <TIM_Base_SetConfig+0x114>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d02b      	beq.n	8002cb2 <TIM_Base_SetConfig+0xb2>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c60:	d027      	beq.n	8002cb2 <TIM_Base_SetConfig+0xb2>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a2c      	ldr	r2, [pc, #176]	; (8002d18 <TIM_Base_SetConfig+0x118>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d023      	beq.n	8002cb2 <TIM_Base_SetConfig+0xb2>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a2b      	ldr	r2, [pc, #172]	; (8002d1c <TIM_Base_SetConfig+0x11c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d01f      	beq.n	8002cb2 <TIM_Base_SetConfig+0xb2>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a2a      	ldr	r2, [pc, #168]	; (8002d20 <TIM_Base_SetConfig+0x120>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d01b      	beq.n	8002cb2 <TIM_Base_SetConfig+0xb2>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a29      	ldr	r2, [pc, #164]	; (8002d24 <TIM_Base_SetConfig+0x124>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d017      	beq.n	8002cb2 <TIM_Base_SetConfig+0xb2>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a28      	ldr	r2, [pc, #160]	; (8002d28 <TIM_Base_SetConfig+0x128>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d013      	beq.n	8002cb2 <TIM_Base_SetConfig+0xb2>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a27      	ldr	r2, [pc, #156]	; (8002d2c <TIM_Base_SetConfig+0x12c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d00f      	beq.n	8002cb2 <TIM_Base_SetConfig+0xb2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a26      	ldr	r2, [pc, #152]	; (8002d30 <TIM_Base_SetConfig+0x130>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d00b      	beq.n	8002cb2 <TIM_Base_SetConfig+0xb2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a25      	ldr	r2, [pc, #148]	; (8002d34 <TIM_Base_SetConfig+0x134>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d007      	beq.n	8002cb2 <TIM_Base_SetConfig+0xb2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a24      	ldr	r2, [pc, #144]	; (8002d38 <TIM_Base_SetConfig+0x138>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d003      	beq.n	8002cb2 <TIM_Base_SetConfig+0xb2>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a23      	ldr	r2, [pc, #140]	; (8002d3c <TIM_Base_SetConfig+0x13c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d108      	bne.n	8002cc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a0a      	ldr	r2, [pc, #40]	; (8002d14 <TIM_Base_SetConfig+0x114>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d003      	beq.n	8002cf8 <TIM_Base_SetConfig+0xf8>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a0c      	ldr	r2, [pc, #48]	; (8002d24 <TIM_Base_SetConfig+0x124>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d103      	bne.n	8002d00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	691a      	ldr	r2, [r3, #16]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	615a      	str	r2, [r3, #20]
}
 8002d06:	bf00      	nop
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	40010000 	.word	0x40010000
 8002d18:	40000400 	.word	0x40000400
 8002d1c:	40000800 	.word	0x40000800
 8002d20:	40000c00 	.word	0x40000c00
 8002d24:	40010400 	.word	0x40010400
 8002d28:	40014000 	.word	0x40014000
 8002d2c:	40014400 	.word	0x40014400
 8002d30:	40014800 	.word	0x40014800
 8002d34:	40001800 	.word	0x40001800
 8002d38:	40001c00 	.word	0x40001c00
 8002d3c:	40002000 	.word	0x40002000

08002d40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	f023 0201 	bic.w	r2, r3, #1
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f023 0303 	bic.w	r3, r3, #3
 8002d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f023 0302 	bic.w	r3, r3, #2
 8002d88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a20      	ldr	r2, [pc, #128]	; (8002e18 <TIM_OC1_SetConfig+0xd8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d003      	beq.n	8002da4 <TIM_OC1_SetConfig+0x64>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a1f      	ldr	r2, [pc, #124]	; (8002e1c <TIM_OC1_SetConfig+0xdc>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d10c      	bne.n	8002dbe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f023 0308 	bic.w	r3, r3, #8
 8002daa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f023 0304 	bic.w	r3, r3, #4
 8002dbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a15      	ldr	r2, [pc, #84]	; (8002e18 <TIM_OC1_SetConfig+0xd8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d003      	beq.n	8002dce <TIM_OC1_SetConfig+0x8e>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a14      	ldr	r2, [pc, #80]	; (8002e1c <TIM_OC1_SetConfig+0xdc>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d111      	bne.n	8002df2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	621a      	str	r2, [r3, #32]
}
 8002e0c:	bf00      	nop
 8002e0e:	371c      	adds	r7, #28
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	40010000 	.word	0x40010000
 8002e1c:	40010400 	.word	0x40010400

08002e20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	f023 0210 	bic.w	r2, r3, #16
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	021b      	lsls	r3, r3, #8
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	f023 0320 	bic.w	r3, r3, #32
 8002e6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a22      	ldr	r2, [pc, #136]	; (8002f04 <TIM_OC2_SetConfig+0xe4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d003      	beq.n	8002e88 <TIM_OC2_SetConfig+0x68>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a21      	ldr	r2, [pc, #132]	; (8002f08 <TIM_OC2_SetConfig+0xe8>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d10d      	bne.n	8002ea4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ea2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a17      	ldr	r2, [pc, #92]	; (8002f04 <TIM_OC2_SetConfig+0xe4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d003      	beq.n	8002eb4 <TIM_OC2_SetConfig+0x94>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a16      	ldr	r2, [pc, #88]	; (8002f08 <TIM_OC2_SetConfig+0xe8>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d113      	bne.n	8002edc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002eba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ec2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	621a      	str	r2, [r3, #32]
}
 8002ef6:	bf00      	nop
 8002ef8:	371c      	adds	r7, #28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40010000 	.word	0x40010000
 8002f08:	40010400 	.word	0x40010400

08002f0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f023 0303 	bic.w	r3, r3, #3
 8002f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	021b      	lsls	r3, r3, #8
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a21      	ldr	r2, [pc, #132]	; (8002fec <TIM_OC3_SetConfig+0xe0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d003      	beq.n	8002f72 <TIM_OC3_SetConfig+0x66>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a20      	ldr	r2, [pc, #128]	; (8002ff0 <TIM_OC3_SetConfig+0xe4>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d10d      	bne.n	8002f8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	021b      	lsls	r3, r3, #8
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a16      	ldr	r2, [pc, #88]	; (8002fec <TIM_OC3_SetConfig+0xe0>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d003      	beq.n	8002f9e <TIM_OC3_SetConfig+0x92>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a15      	ldr	r2, [pc, #84]	; (8002ff0 <TIM_OC3_SetConfig+0xe4>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d113      	bne.n	8002fc6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	621a      	str	r2, [r3, #32]
}
 8002fe0:	bf00      	nop
 8002fe2:	371c      	adds	r7, #28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	40010000 	.word	0x40010000
 8002ff0:	40010400 	.word	0x40010400

08002ff4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800302a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	021b      	lsls	r3, r3, #8
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4313      	orrs	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800303e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	031b      	lsls	r3, r3, #12
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a12      	ldr	r2, [pc, #72]	; (8003098 <TIM_OC4_SetConfig+0xa4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d003      	beq.n	800305c <TIM_OC4_SetConfig+0x68>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a11      	ldr	r2, [pc, #68]	; (800309c <TIM_OC4_SetConfig+0xa8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d109      	bne.n	8003070 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003062:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	019b      	lsls	r3, r3, #6
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	4313      	orrs	r3, r2
 800306e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	621a      	str	r2, [r3, #32]
}
 800308a:	bf00      	nop
 800308c:	371c      	adds	r7, #28
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	40010000 	.word	0x40010000
 800309c:	40010400 	.word	0x40010400

080030a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	f023 0201 	bic.w	r2, r3, #1
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f023 030a 	bic.w	r3, r3, #10
 80030dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	621a      	str	r2, [r3, #32]
}
 80030f2:	bf00      	nop
 80030f4:	371c      	adds	r7, #28
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030fe:	b480      	push	{r7}
 8003100:	b087      	sub	sp, #28
 8003102:	af00      	add	r7, sp, #0
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	f023 0210 	bic.w	r2, r3, #16
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003128:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	031b      	lsls	r3, r3, #12
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	4313      	orrs	r3, r2
 8003132:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800313a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	621a      	str	r2, [r3, #32]
}
 8003152:	bf00      	nop
 8003154:	371c      	adds	r7, #28
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800315e:	b480      	push	{r7}
 8003160:	b085      	sub	sp, #20
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
 8003166:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003174:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4313      	orrs	r3, r2
 800317c:	f043 0307 	orr.w	r3, r3, #7
 8003180:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	609a      	str	r2, [r3, #8]
}
 8003188:	bf00      	nop
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003194:	b480      	push	{r7}
 8003196:	b087      	sub	sp, #28
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
 80031a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	021a      	lsls	r2, r3, #8
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	4313      	orrs	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	609a      	str	r2, [r3, #8]
}
 80031c8:	bf00      	nop
 80031ca:	371c      	adds	r7, #28
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f003 031f 	and.w	r3, r3, #31
 80031e6:	2201      	movs	r2, #1
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a1a      	ldr	r2, [r3, #32]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	43db      	mvns	r3, r3
 80031f6:	401a      	ands	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a1a      	ldr	r2, [r3, #32]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	fa01 f303 	lsl.w	r3, r1, r3
 800320c:	431a      	orrs	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	621a      	str	r2, [r3, #32]
}
 8003212:	bf00      	nop
 8003214:	371c      	adds	r7, #28
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800321e:	b480      	push	{r7}
 8003220:	b085      	sub	sp, #20
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
 8003226:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003232:	2302      	movs	r3, #2
 8003234:	e032      	b.n	800329c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2202      	movs	r2, #2
 8003242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	4313      	orrs	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800326e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	4313      	orrs	r3, r2
 8003278:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e03f      	b.n	800333a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d106      	bne.n	80032d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f001 f9ea 	bl	80046a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2224      	movs	r2, #36	; 0x24
 80032d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f9b1 	bl	8003654 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003300:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695a      	ldr	r2, [r3, #20]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003310:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003320:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b088      	sub	sp, #32
 8003346:	af02      	add	r7, sp, #8
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	603b      	str	r3, [r7, #0]
 800334e:	4613      	mov	r3, r2
 8003350:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003352:	2300      	movs	r3, #0
 8003354:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b20      	cmp	r3, #32
 8003360:	f040 8083 	bne.w	800346a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <HAL_UART_Transmit+0x2e>
 800336a:	88fb      	ldrh	r3, [r7, #6]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e07b      	b.n	800346c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800337a:	2b01      	cmp	r3, #1
 800337c:	d101      	bne.n	8003382 <HAL_UART_Transmit+0x40>
 800337e:	2302      	movs	r3, #2
 8003380:	e074      	b.n	800346c <HAL_UART_Transmit+0x12a>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2221      	movs	r2, #33	; 0x21
 8003394:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003398:	f7fd fd66 	bl	8000e68 <HAL_GetTick>
 800339c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	88fa      	ldrh	r2, [r7, #6]
 80033a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	88fa      	ldrh	r2, [r7, #6]
 80033a8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033aa:	e042      	b.n	8003432 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c2:	d122      	bne.n	800340a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2200      	movs	r2, #0
 80033cc:	2180      	movs	r1, #128	; 0x80
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 f8f6 	bl	80035c0 <UART_WaitOnFlagUntilTimeout>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e046      	b.n	800346c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033f0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d103      	bne.n	8003402 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	3302      	adds	r3, #2
 80033fe:	60bb      	str	r3, [r7, #8]
 8003400:	e017      	b.n	8003432 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	3301      	adds	r3, #1
 8003406:	60bb      	str	r3, [r7, #8]
 8003408:	e013      	b.n	8003432 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2200      	movs	r2, #0
 8003412:	2180      	movs	r1, #128	; 0x80
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 f8d3 	bl	80035c0 <UART_WaitOnFlagUntilTimeout>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e023      	b.n	800346c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	1c5a      	adds	r2, r3, #1
 8003428:	60ba      	str	r2, [r7, #8]
 800342a:	781a      	ldrb	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003436:	b29b      	uxth	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1b7      	bne.n	80033ac <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	2200      	movs	r2, #0
 8003444:	2140      	movs	r1, #64	; 0x40
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 f8ba 	bl	80035c0 <UART_WaitOnFlagUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e00a      	b.n	800346c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2220      	movs	r2, #32
 800345a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	e000      	b.n	800346c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800346a:	2302      	movs	r3, #2
  }
}
 800346c:	4618      	mov	r0, r3
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af02      	add	r7, sp, #8
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	603b      	str	r3, [r7, #0]
 8003480:	4613      	mov	r3, r2
 8003482:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b20      	cmp	r3, #32
 8003492:	f040 8090 	bne.w	80035b6 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d002      	beq.n	80034a2 <HAL_UART_Receive+0x2e>
 800349c:	88fb      	ldrh	r3, [r7, #6]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e088      	b.n	80035b8 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_UART_Receive+0x40>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e081      	b.n	80035b8 <HAL_UART_Receive+0x144>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2222      	movs	r2, #34	; 0x22
 80034c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80034ca:	f7fd fccd 	bl	8000e68 <HAL_GetTick>
 80034ce:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	88fa      	ldrh	r2, [r7, #6]
 80034d4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	88fa      	ldrh	r2, [r7, #6]
 80034da:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80034dc:	e05c      	b.n	8003598 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f4:	d12b      	bne.n	800354e <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2200      	movs	r2, #0
 80034fe:	2120      	movs	r1, #32
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 f85d 	bl	80035c0 <UART_WaitOnFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e053      	b.n	80035b8 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10c      	bne.n	8003536 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	b29b      	uxth	r3, r3
 8003524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003528:	b29a      	uxth	r2, r3
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	3302      	adds	r3, #2
 8003532:	60bb      	str	r3, [r7, #8]
 8003534:	e030      	b.n	8003598 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	b29b      	uxth	r3, r3
 800353e:	b2db      	uxtb	r3, r3
 8003540:	b29a      	uxth	r2, r3
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	3301      	adds	r3, #1
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	e024      	b.n	8003598 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2200      	movs	r2, #0
 8003556:	2120      	movs	r1, #32
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 f831 	bl	80035c0 <UART_WaitOnFlagUntilTimeout>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e027      	b.n	80035b8 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d108      	bne.n	8003582 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6859      	ldr	r1, [r3, #4]
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	1c5a      	adds	r2, r3, #1
 800357a:	60ba      	str	r2, [r7, #8]
 800357c:	b2ca      	uxtb	r2, r1
 800357e:	701a      	strb	r2, [r3, #0]
 8003580:	e00a      	b.n	8003598 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	b2da      	uxtb	r2, r3
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	1c59      	adds	r1, r3, #1
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800359c:	b29b      	uxth	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d19d      	bne.n	80034de <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2220      	movs	r2, #32
 80035a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	e000      	b.n	80035b8 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80035b6:	2302      	movs	r3, #2
  }
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	603b      	str	r3, [r7, #0]
 80035cc:	4613      	mov	r3, r2
 80035ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035d0:	e02c      	b.n	800362c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d8:	d028      	beq.n	800362c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d007      	beq.n	80035f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80035e0:	f7fd fc42 	bl	8000e68 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d21d      	bcs.n	800362c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035fe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695a      	ldr	r2, [r3, #20]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0201 	bic.w	r2, r2, #1
 800360e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e00f      	b.n	800364c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	4013      	ands	r3, r2
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	429a      	cmp	r2, r3
 800363a:	bf0c      	ite	eq
 800363c:	2301      	moveq	r3, #1
 800363e:	2300      	movne	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	461a      	mov	r2, r3
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	429a      	cmp	r2, r3
 8003648:	d0c3      	beq.n	80035d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003654:	b5b0      	push	{r4, r5, r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	4313      	orrs	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003694:	f023 030c 	bic.w	r3, r3, #12
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6812      	ldr	r2, [r2, #0]
 800369c:	68f9      	ldr	r1, [r7, #12]
 800369e:	430b      	orrs	r3, r1
 80036a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	699a      	ldr	r2, [r3, #24]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036c0:	f040 80e4 	bne.w	800388c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4aab      	ldr	r2, [pc, #684]	; (8003978 <UART_SetConfig+0x324>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d004      	beq.n	80036d8 <UART_SetConfig+0x84>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4aaa      	ldr	r2, [pc, #680]	; (800397c <UART_SetConfig+0x328>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d16c      	bne.n	80037b2 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80036d8:	f7fe fbea 	bl	8001eb0 <HAL_RCC_GetPCLK2Freq>
 80036dc:	4602      	mov	r2, r0
 80036de:	4613      	mov	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	009a      	lsls	r2, r3, #2
 80036e6:	441a      	add	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f2:	4aa3      	ldr	r2, [pc, #652]	; (8003980 <UART_SetConfig+0x32c>)
 80036f4:	fba2 2303 	umull	r2, r3, r2, r3
 80036f8:	095b      	lsrs	r3, r3, #5
 80036fa:	011c      	lsls	r4, r3, #4
 80036fc:	f7fe fbd8 	bl	8001eb0 <HAL_RCC_GetPCLK2Freq>
 8003700:	4602      	mov	r2, r0
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	009a      	lsls	r2, r3, #2
 800370a:	441a      	add	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	fbb2 f5f3 	udiv	r5, r2, r3
 8003716:	f7fe fbcb 	bl	8001eb0 <HAL_RCC_GetPCLK2Freq>
 800371a:	4602      	mov	r2, r0
 800371c:	4613      	mov	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	009a      	lsls	r2, r3, #2
 8003724:	441a      	add	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003730:	4a93      	ldr	r2, [pc, #588]	; (8003980 <UART_SetConfig+0x32c>)
 8003732:	fba2 2303 	umull	r2, r3, r2, r3
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	2264      	movs	r2, #100	; 0x64
 800373a:	fb02 f303 	mul.w	r3, r2, r3
 800373e:	1aeb      	subs	r3, r5, r3
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	3332      	adds	r3, #50	; 0x32
 8003744:	4a8e      	ldr	r2, [pc, #568]	; (8003980 <UART_SetConfig+0x32c>)
 8003746:	fba2 2303 	umull	r2, r3, r2, r3
 800374a:	095b      	lsrs	r3, r3, #5
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003752:	441c      	add	r4, r3
 8003754:	f7fe fbac 	bl	8001eb0 <HAL_RCC_GetPCLK2Freq>
 8003758:	4602      	mov	r2, r0
 800375a:	4613      	mov	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	009a      	lsls	r2, r3, #2
 8003762:	441a      	add	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	fbb2 f5f3 	udiv	r5, r2, r3
 800376e:	f7fe fb9f 	bl	8001eb0 <HAL_RCC_GetPCLK2Freq>
 8003772:	4602      	mov	r2, r0
 8003774:	4613      	mov	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	009a      	lsls	r2, r3, #2
 800377c:	441a      	add	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	fbb2 f3f3 	udiv	r3, r2, r3
 8003788:	4a7d      	ldr	r2, [pc, #500]	; (8003980 <UART_SetConfig+0x32c>)
 800378a:	fba2 2303 	umull	r2, r3, r2, r3
 800378e:	095b      	lsrs	r3, r3, #5
 8003790:	2264      	movs	r2, #100	; 0x64
 8003792:	fb02 f303 	mul.w	r3, r2, r3
 8003796:	1aeb      	subs	r3, r5, r3
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	3332      	adds	r3, #50	; 0x32
 800379c:	4a78      	ldr	r2, [pc, #480]	; (8003980 <UART_SetConfig+0x32c>)
 800379e:	fba2 2303 	umull	r2, r3, r2, r3
 80037a2:	095b      	lsrs	r3, r3, #5
 80037a4:	f003 0207 	and.w	r2, r3, #7
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4422      	add	r2, r4
 80037ae:	609a      	str	r2, [r3, #8]
 80037b0:	e154      	b.n	8003a5c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80037b2:	f7fe fb69 	bl	8001e88 <HAL_RCC_GetPCLK1Freq>
 80037b6:	4602      	mov	r2, r0
 80037b8:	4613      	mov	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	009a      	lsls	r2, r3, #2
 80037c0:	441a      	add	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037cc:	4a6c      	ldr	r2, [pc, #432]	; (8003980 <UART_SetConfig+0x32c>)
 80037ce:	fba2 2303 	umull	r2, r3, r2, r3
 80037d2:	095b      	lsrs	r3, r3, #5
 80037d4:	011c      	lsls	r4, r3, #4
 80037d6:	f7fe fb57 	bl	8001e88 <HAL_RCC_GetPCLK1Freq>
 80037da:	4602      	mov	r2, r0
 80037dc:	4613      	mov	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	009a      	lsls	r2, r3, #2
 80037e4:	441a      	add	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	fbb2 f5f3 	udiv	r5, r2, r3
 80037f0:	f7fe fb4a 	bl	8001e88 <HAL_RCC_GetPCLK1Freq>
 80037f4:	4602      	mov	r2, r0
 80037f6:	4613      	mov	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	009a      	lsls	r2, r3, #2
 80037fe:	441a      	add	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	fbb2 f3f3 	udiv	r3, r2, r3
 800380a:	4a5d      	ldr	r2, [pc, #372]	; (8003980 <UART_SetConfig+0x32c>)
 800380c:	fba2 2303 	umull	r2, r3, r2, r3
 8003810:	095b      	lsrs	r3, r3, #5
 8003812:	2264      	movs	r2, #100	; 0x64
 8003814:	fb02 f303 	mul.w	r3, r2, r3
 8003818:	1aeb      	subs	r3, r5, r3
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	3332      	adds	r3, #50	; 0x32
 800381e:	4a58      	ldr	r2, [pc, #352]	; (8003980 <UART_SetConfig+0x32c>)
 8003820:	fba2 2303 	umull	r2, r3, r2, r3
 8003824:	095b      	lsrs	r3, r3, #5
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800382c:	441c      	add	r4, r3
 800382e:	f7fe fb2b 	bl	8001e88 <HAL_RCC_GetPCLK1Freq>
 8003832:	4602      	mov	r2, r0
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	009a      	lsls	r2, r3, #2
 800383c:	441a      	add	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	fbb2 f5f3 	udiv	r5, r2, r3
 8003848:	f7fe fb1e 	bl	8001e88 <HAL_RCC_GetPCLK1Freq>
 800384c:	4602      	mov	r2, r0
 800384e:	4613      	mov	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	009a      	lsls	r2, r3, #2
 8003856:	441a      	add	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003862:	4a47      	ldr	r2, [pc, #284]	; (8003980 <UART_SetConfig+0x32c>)
 8003864:	fba2 2303 	umull	r2, r3, r2, r3
 8003868:	095b      	lsrs	r3, r3, #5
 800386a:	2264      	movs	r2, #100	; 0x64
 800386c:	fb02 f303 	mul.w	r3, r2, r3
 8003870:	1aeb      	subs	r3, r5, r3
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	3332      	adds	r3, #50	; 0x32
 8003876:	4a42      	ldr	r2, [pc, #264]	; (8003980 <UART_SetConfig+0x32c>)
 8003878:	fba2 2303 	umull	r2, r3, r2, r3
 800387c:	095b      	lsrs	r3, r3, #5
 800387e:	f003 0207 	and.w	r2, r3, #7
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4422      	add	r2, r4
 8003888:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800388a:	e0e7      	b.n	8003a5c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a39      	ldr	r2, [pc, #228]	; (8003978 <UART_SetConfig+0x324>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d004      	beq.n	80038a0 <UART_SetConfig+0x24c>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a38      	ldr	r2, [pc, #224]	; (800397c <UART_SetConfig+0x328>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d171      	bne.n	8003984 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80038a0:	f7fe fb06 	bl	8001eb0 <HAL_RCC_GetPCLK2Freq>
 80038a4:	4602      	mov	r2, r0
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	009a      	lsls	r2, r3, #2
 80038ae:	441a      	add	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ba:	4a31      	ldr	r2, [pc, #196]	; (8003980 <UART_SetConfig+0x32c>)
 80038bc:	fba2 2303 	umull	r2, r3, r2, r3
 80038c0:	095b      	lsrs	r3, r3, #5
 80038c2:	011c      	lsls	r4, r3, #4
 80038c4:	f7fe faf4 	bl	8001eb0 <HAL_RCC_GetPCLK2Freq>
 80038c8:	4602      	mov	r2, r0
 80038ca:	4613      	mov	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	009a      	lsls	r2, r3, #2
 80038d2:	441a      	add	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	fbb2 f5f3 	udiv	r5, r2, r3
 80038de:	f7fe fae7 	bl	8001eb0 <HAL_RCC_GetPCLK2Freq>
 80038e2:	4602      	mov	r2, r0
 80038e4:	4613      	mov	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	009a      	lsls	r2, r3, #2
 80038ec:	441a      	add	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f8:	4a21      	ldr	r2, [pc, #132]	; (8003980 <UART_SetConfig+0x32c>)
 80038fa:	fba2 2303 	umull	r2, r3, r2, r3
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	2264      	movs	r2, #100	; 0x64
 8003902:	fb02 f303 	mul.w	r3, r2, r3
 8003906:	1aeb      	subs	r3, r5, r3
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	3332      	adds	r3, #50	; 0x32
 800390c:	4a1c      	ldr	r2, [pc, #112]	; (8003980 <UART_SetConfig+0x32c>)
 800390e:	fba2 2303 	umull	r2, r3, r2, r3
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003918:	441c      	add	r4, r3
 800391a:	f7fe fac9 	bl	8001eb0 <HAL_RCC_GetPCLK2Freq>
 800391e:	4602      	mov	r2, r0
 8003920:	4613      	mov	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	009a      	lsls	r2, r3, #2
 8003928:	441a      	add	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	fbb2 f5f3 	udiv	r5, r2, r3
 8003934:	f7fe fabc 	bl	8001eb0 <HAL_RCC_GetPCLK2Freq>
 8003938:	4602      	mov	r2, r0
 800393a:	4613      	mov	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4413      	add	r3, r2
 8003940:	009a      	lsls	r2, r3, #2
 8003942:	441a      	add	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	fbb2 f3f3 	udiv	r3, r2, r3
 800394e:	4a0c      	ldr	r2, [pc, #48]	; (8003980 <UART_SetConfig+0x32c>)
 8003950:	fba2 2303 	umull	r2, r3, r2, r3
 8003954:	095b      	lsrs	r3, r3, #5
 8003956:	2264      	movs	r2, #100	; 0x64
 8003958:	fb02 f303 	mul.w	r3, r2, r3
 800395c:	1aeb      	subs	r3, r5, r3
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	3332      	adds	r3, #50	; 0x32
 8003962:	4a07      	ldr	r2, [pc, #28]	; (8003980 <UART_SetConfig+0x32c>)
 8003964:	fba2 2303 	umull	r2, r3, r2, r3
 8003968:	095b      	lsrs	r3, r3, #5
 800396a:	f003 020f 	and.w	r2, r3, #15
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4422      	add	r2, r4
 8003974:	609a      	str	r2, [r3, #8]
 8003976:	e071      	b.n	8003a5c <UART_SetConfig+0x408>
 8003978:	40011000 	.word	0x40011000
 800397c:	40011400 	.word	0x40011400
 8003980:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003984:	f7fe fa80 	bl	8001e88 <HAL_RCC_GetPCLK1Freq>
 8003988:	4602      	mov	r2, r0
 800398a:	4613      	mov	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	009a      	lsls	r2, r3, #2
 8003992:	441a      	add	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	fbb2 f3f3 	udiv	r3, r2, r3
 800399e:	4a31      	ldr	r2, [pc, #196]	; (8003a64 <UART_SetConfig+0x410>)
 80039a0:	fba2 2303 	umull	r2, r3, r2, r3
 80039a4:	095b      	lsrs	r3, r3, #5
 80039a6:	011c      	lsls	r4, r3, #4
 80039a8:	f7fe fa6e 	bl	8001e88 <HAL_RCC_GetPCLK1Freq>
 80039ac:	4602      	mov	r2, r0
 80039ae:	4613      	mov	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	009a      	lsls	r2, r3, #2
 80039b6:	441a      	add	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	fbb2 f5f3 	udiv	r5, r2, r3
 80039c2:	f7fe fa61 	bl	8001e88 <HAL_RCC_GetPCLK1Freq>
 80039c6:	4602      	mov	r2, r0
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	009a      	lsls	r2, r3, #2
 80039d0:	441a      	add	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039dc:	4a21      	ldr	r2, [pc, #132]	; (8003a64 <UART_SetConfig+0x410>)
 80039de:	fba2 2303 	umull	r2, r3, r2, r3
 80039e2:	095b      	lsrs	r3, r3, #5
 80039e4:	2264      	movs	r2, #100	; 0x64
 80039e6:	fb02 f303 	mul.w	r3, r2, r3
 80039ea:	1aeb      	subs	r3, r5, r3
 80039ec:	011b      	lsls	r3, r3, #4
 80039ee:	3332      	adds	r3, #50	; 0x32
 80039f0:	4a1c      	ldr	r2, [pc, #112]	; (8003a64 <UART_SetConfig+0x410>)
 80039f2:	fba2 2303 	umull	r2, r3, r2, r3
 80039f6:	095b      	lsrs	r3, r3, #5
 80039f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039fc:	441c      	add	r4, r3
 80039fe:	f7fe fa43 	bl	8001e88 <HAL_RCC_GetPCLK1Freq>
 8003a02:	4602      	mov	r2, r0
 8003a04:	4613      	mov	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	009a      	lsls	r2, r3, #2
 8003a0c:	441a      	add	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	fbb2 f5f3 	udiv	r5, r2, r3
 8003a18:	f7fe fa36 	bl	8001e88 <HAL_RCC_GetPCLK1Freq>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	4613      	mov	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	009a      	lsls	r2, r3, #2
 8003a26:	441a      	add	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a32:	4a0c      	ldr	r2, [pc, #48]	; (8003a64 <UART_SetConfig+0x410>)
 8003a34:	fba2 2303 	umull	r2, r3, r2, r3
 8003a38:	095b      	lsrs	r3, r3, #5
 8003a3a:	2264      	movs	r2, #100	; 0x64
 8003a3c:	fb02 f303 	mul.w	r3, r2, r3
 8003a40:	1aeb      	subs	r3, r5, r3
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	3332      	adds	r3, #50	; 0x32
 8003a46:	4a07      	ldr	r2, [pc, #28]	; (8003a64 <UART_SetConfig+0x410>)
 8003a48:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4c:	095b      	lsrs	r3, r3, #5
 8003a4e:	f003 020f 	and.w	r2, r3, #15
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4422      	add	r2, r4
 8003a58:	609a      	str	r2, [r3, #8]
}
 8003a5a:	e7ff      	b.n	8003a5c <UART_SetConfig+0x408>
 8003a5c:	bf00      	nop
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bdb0      	pop	{r4, r5, r7, pc}
 8003a64:	51eb851f 	.word	0x51eb851f

08003a68 <delay>:
int maxEmpty = 20;
char buf[10];
int tmp;

void delay (uint32_t us)
  {
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
   __HAL_TIM_SET_COUNTER(&htim4, 0);
 8003a70:	4b08      	ldr	r3, [pc, #32]	; (8003a94 <delay+0x2c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2200      	movs	r2, #0
 8003a76:	625a      	str	r2, [r3, #36]	; 0x24
   while ((__HAL_TIM_GET_COUNTER(&htim4))<us);
 8003a78:	bf00      	nop
 8003a7a:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <delay+0x2c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d8f9      	bhi.n	8003a7a <delay+0x12>
  }
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	200000a8 	.word	0x200000a8

08003a98 <hcsr04_read>:
  uint32_t hcsr04_read (void)
  {
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
   uint32_t local_time=0;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	607b      	str	r3, [r7, #4]
   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);  // pull the TRIG pin HIGH
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2110      	movs	r1, #16
 8003aa6:	4817      	ldr	r0, [pc, #92]	; (8003b04 <hcsr04_read+0x6c>)
 8003aa8:	f7fd fca4 	bl	80013f4 <HAL_GPIO_WritePin>
   delay(2);  // wait for 2 us
 8003aac:	2002      	movs	r0, #2
 8003aae:	f7ff ffdb 	bl	8003a68 <delay>


   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	2110      	movs	r1, #16
 8003ab6:	4813      	ldr	r0, [pc, #76]	; (8003b04 <hcsr04_read+0x6c>)
 8003ab8:	f7fd fc9c 	bl	80013f4 <HAL_GPIO_WritePin>
   delay(10);  // wait for 10 us
 8003abc:	200a      	movs	r0, #10
 8003abe:	f7ff ffd3 	bl	8003a68 <delay>
   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);  // pull the TRIG pin low
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2110      	movs	r1, #16
 8003ac6:	480f      	ldr	r0, [pc, #60]	; (8003b04 <hcsr04_read+0x6c>)
 8003ac8:	f7fd fc94 	bl	80013f4 <HAL_GPIO_WritePin>

   // read the time for which the pin is high

   while (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)));  // wait for the ECHO pin to go high
 8003acc:	bf00      	nop
 8003ace:	2102      	movs	r1, #2
 8003ad0:	480d      	ldr	r0, [pc, #52]	; (8003b08 <hcsr04_read+0x70>)
 8003ad2:	f7fd fc77 	bl	80013c4 <HAL_GPIO_ReadPin>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0f8      	beq.n	8003ace <hcsr04_read+0x36>
   while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))    // while the pin is high
 8003adc:	e005      	b.n	8003aea <hcsr04_read+0x52>
    {
    local_time++;   // measure time for which the pin is high
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	607b      	str	r3, [r7, #4]
    delay (1);
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	f7ff ffbf 	bl	8003a68 <delay>
   while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))    // while the pin is high
 8003aea:	2102      	movs	r1, #2
 8003aec:	4806      	ldr	r0, [pc, #24]	; (8003b08 <hcsr04_read+0x70>)
 8003aee:	f7fd fc69 	bl	80013c4 <HAL_GPIO_ReadPin>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1f2      	bne.n	8003ade <hcsr04_read+0x46>
    }
   return local_time;
 8003af8:	687b      	ldr	r3, [r7, #4]
  }
 8003afa:	4618      	mov	r0, r3
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	40020800 	.word	0x40020800
 8003b08:	40020000 	.word	0x40020000

08003b0c <rtc_read>:


 unsigned int rtc_read(int mode) {//0 for hour, 1 for minute, 2 for second
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b092      	sub	sp, #72	; 0x48
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
      RTC_DateTypeDef dateStruct;
      RTC_TimeTypeDef timeStruct;
      struct tm timeinfo;

      hrtc.Instance = RTC;
 8003b14:	4b1b      	ldr	r3, [pc, #108]	; (8003b84 <rtc_read+0x78>)
 8003b16:	4a1c      	ldr	r2, [pc, #112]	; (8003b88 <rtc_read+0x7c>)
 8003b18:	601a      	str	r2, [r3, #0]

      // Read actual date and time
      HAL_RTC_GetTime(&hrtc, &timeStruct, FORMAT_BIN); // Read time first!
 8003b1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b1e:	2200      	movs	r2, #0
 8003b20:	4619      	mov	r1, r3
 8003b22:	4818      	ldr	r0, [pc, #96]	; (8003b84 <rtc_read+0x78>)
 8003b24:	f7fe fc08 	bl	8002338 <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &dateStruct, FORMAT_BIN);
 8003b28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4814      	ldr	r0, [pc, #80]	; (8003b84 <rtc_read+0x78>)
 8003b32:	f7fe fd06 	bl	8002542 <HAL_RTC_GetDate>

      // Setup a tm structure based on the RTC
      timeinfo.tm_wday = dateStruct.WeekDay;
 8003b36:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
      timeinfo.tm_mon  = dateStruct.Month - 1;
 8003b3c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003b40:	3b01      	subs	r3, #1
 8003b42:	61fb      	str	r3, [r7, #28]
      timeinfo.tm_mday = dateStruct.Date;
 8003b44:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003b48:	61bb      	str	r3, [r7, #24]
      timeinfo.tm_year = dateStruct.Year + 100;
 8003b4a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003b4e:	3364      	adds	r3, #100	; 0x64
 8003b50:	623b      	str	r3, [r7, #32]
      timeinfo.tm_hour = timeStruct.Hours;
 8003b52:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003b56:	617b      	str	r3, [r7, #20]
      timeinfo.tm_min  = timeStruct.Minutes;
 8003b58:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8003b5c:	613b      	str	r3, [r7, #16]
      timeinfo.tm_sec  = timeStruct.Seconds;
 8003b5e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003b62:	60fb      	str	r3, [r7, #12]

      if(mode==0) return timeinfo.tm_year;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <rtc_read+0x62>
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	e005      	b.n	8003b7a <rtc_read+0x6e>
      if(mode==1) return timeinfo.tm_min;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d101      	bne.n	8003b78 <rtc_read+0x6c>
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	e000      	b.n	8003b7a <rtc_read+0x6e>
      return timeinfo.tm_sec;
 8003b78:	68fb      	ldr	r3, [r7, #12]
  }
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3748      	adds	r7, #72	; 0x48
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20000140 	.word	0x20000140
 8003b88:	40002800 	.word	0x40002800

08003b8c <setCurTime>:
	 if((newTime-oldTime) > diffNotifyTime) return 1;
	 else return 0;
}

void setCurTime()
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
	hour0=rtc_read(0);
 8003b90:	2000      	movs	r0, #0
 8003b92:	f7ff ffbb 	bl	8003b0c <rtc_read>
 8003b96:	4602      	mov	r2, r0
 8003b98:	4b07      	ldr	r3, [pc, #28]	; (8003bb8 <setCurTime+0x2c>)
 8003b9a:	601a      	str	r2, [r3, #0]
	min0=rtc_read(1);
 8003b9c:	2001      	movs	r0, #1
 8003b9e:	f7ff ffb5 	bl	8003b0c <rtc_read>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <setCurTime+0x30>)
 8003ba6:	601a      	str	r2, [r3, #0]
	sec0=rtc_read(2);
 8003ba8:	2002      	movs	r0, #2
 8003baa:	f7ff ffaf 	bl	8003b0c <rtc_read>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	4b03      	ldr	r3, [pc, #12]	; (8003bc0 <setCurTime+0x34>)
 8003bb2:	601a      	str	r2, [r3, #0]
	return ;
 8003bb4:	bf00      	nop

}
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	200001d4 	.word	0x200001d4
 8003bbc:	20000160 	.word	0x20000160
 8003bc0:	20000164 	.word	0x20000164

08003bc4 <initNotify>:

void initNotify(unsigned int diffTime)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
	setCurTime();
 8003bcc:	f7ff ffde 	bl	8003b8c <setCurTime>
	diffNotifyTime=diffTime-delayTime/1000;
 8003bd0:	4b06      	ldr	r3, [pc, #24]	; (8003bec <initNotify+0x28>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a06      	ldr	r2, [pc, #24]	; (8003bf0 <initNotify+0x2c>)
 8003bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bda:	099b      	lsrs	r3, r3, #6
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	4a04      	ldr	r2, [pc, #16]	; (8003bf4 <initNotify+0x30>)
 8003be2:	6013      	str	r3, [r2, #0]
	return;
 8003be4:	bf00      	nop
}
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	20000168 	.word	0x20000168
 8003bf0:	10624dd3 	.word	0x10624dd3
 8003bf4:	200001d0 	.word	0x200001d0

08003bf8 <readFromSensor>:
	setCurTime();
	return;
}

uint32_t readFromSensor()
{
 8003bf8:	b598      	push	{r3, r4, r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
	return hcsr04_read() * .034;
 8003bfc:	f7ff ff4c 	bl	8003a98 <hcsr04_read>
 8003c00:	4603      	mov	r3, r0
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fc fc76 	bl	80004f4 <__aeabi_ui2d>
 8003c08:	a307      	add	r3, pc, #28	; (adr r3, 8003c28 <readFromSensor+0x30>)
 8003c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0e:	f7fc fceb 	bl	80005e8 <__aeabi_dmul>
 8003c12:	4603      	mov	r3, r0
 8003c14:	460c      	mov	r4, r1
 8003c16:	4618      	mov	r0, r3
 8003c18:	4621      	mov	r1, r4
 8003c1a:	f7fc ff1f 	bl	8000a5c <__aeabi_d2uiz>
 8003c1e:	4603      	mov	r3, r0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	bd98      	pop	{r3, r4, r7, pc}
 8003c24:	f3af 8000 	nop.w
 8003c28:	b020c49c 	.word	0xb020c49c
 8003c2c:	3fa16872 	.word	0x3fa16872

08003c30 <sendByUART>:

void sendByUART(_Bool status,int dist) //send To uart LIKE "OFF,ERROR" or "ON,50"
{
 8003c30:	b5b0      	push	{r4, r5, r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	4603      	mov	r3, r0
 8003c38:	6039      	str	r1, [r7, #0]
 8003c3a:	71fb      	strb	r3, [r7, #7]
	int tmp = (int)((((double)maxEmpty - (double)dist)/(double)maxEmpty)*100);
 8003c3c:	4b39      	ldr	r3, [pc, #228]	; (8003d24 <sendByUART+0xf4>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fc fc67 	bl	8000514 <__aeabi_i2d>
 8003c46:	4604      	mov	r4, r0
 8003c48:	460d      	mov	r5, r1
 8003c4a:	6838      	ldr	r0, [r7, #0]
 8003c4c:	f7fc fc62 	bl	8000514 <__aeabi_i2d>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	4620      	mov	r0, r4
 8003c56:	4629      	mov	r1, r5
 8003c58:	f7fc fb0e 	bl	8000278 <__aeabi_dsub>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	460c      	mov	r4, r1
 8003c60:	4625      	mov	r5, r4
 8003c62:	461c      	mov	r4, r3
 8003c64:	4b2f      	ldr	r3, [pc, #188]	; (8003d24 <sendByUART+0xf4>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fc fc53 	bl	8000514 <__aeabi_i2d>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4620      	mov	r0, r4
 8003c74:	4629      	mov	r1, r5
 8003c76:	f7fc fde1 	bl	800083c <__aeabi_ddiv>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	460c      	mov	r4, r1
 8003c7e:	4618      	mov	r0, r3
 8003c80:	4621      	mov	r1, r4
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	4b28      	ldr	r3, [pc, #160]	; (8003d28 <sendByUART+0xf8>)
 8003c88:	f7fc fcae 	bl	80005e8 <__aeabi_dmul>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	460c      	mov	r4, r1
 8003c90:	4618      	mov	r0, r3
 8003c92:	4621      	mov	r1, r4
 8003c94:	f7fc feba 	bl	8000a0c <__aeabi_d2iz>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<10;i++) buf[i]='\0';
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	e007      	b.n	8003cb2 <sendByUART+0x82>
 8003ca2:	4a22      	ldr	r2, [pc, #136]	; (8003d2c <sendByUART+0xfc>)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	2200      	movs	r2, #0
 8003caa:	701a      	strb	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2b09      	cmp	r3, #9
 8003cb6:	ddf4      	ble.n	8003ca2 <sendByUART+0x72>
	if(tmp < 0)
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	da15      	bge.n	8003cea <sendByUART+0xba>
	{
		if(!status) sprintf(buf,"OFF,ERROR");
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
 8003cc0:	f083 0301 	eor.w	r3, r3, #1
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d007      	beq.n	8003cda <sendByUART+0xaa>
 8003cca:	4a18      	ldr	r2, [pc, #96]	; (8003d2c <sendByUART+0xfc>)
 8003ccc:	4b18      	ldr	r3, [pc, #96]	; (8003d30 <sendByUART+0x100>)
 8003cce:	cb03      	ldmia	r3!, {r0, r1}
 8003cd0:	6010      	str	r0, [r2, #0]
 8003cd2:	6051      	str	r1, [r2, #4]
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	8113      	strh	r3, [r2, #8]
 8003cd8:	e018      	b.n	8003d0c <sendByUART+0xdc>
		else sprintf(buf,"ON,ERROR");
 8003cda:	4a14      	ldr	r2, [pc, #80]	; (8003d2c <sendByUART+0xfc>)
 8003cdc:	4b15      	ldr	r3, [pc, #84]	; (8003d34 <sendByUART+0x104>)
 8003cde:	cb03      	ldmia	r3!, {r0, r1}
 8003ce0:	6010      	str	r0, [r2, #0]
 8003ce2:	6051      	str	r1, [r2, #4]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	7213      	strb	r3, [r2, #8]
 8003ce8:	e010      	b.n	8003d0c <sendByUART+0xdc>
	}
	else
	{
		if(!status) sprintf(buf,"OFF,%d",tmp);
 8003cea:	79fb      	ldrb	r3, [r7, #7]
 8003cec:	f083 0301 	eor.w	r3, r3, #1
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d005      	beq.n	8003d02 <sendByUART+0xd2>
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	490f      	ldr	r1, [pc, #60]	; (8003d38 <sendByUART+0x108>)
 8003cfa:	480c      	ldr	r0, [pc, #48]	; (8003d2c <sendByUART+0xfc>)
 8003cfc:	f000 fe08 	bl	8004910 <siprintf>
 8003d00:	e004      	b.n	8003d0c <sendByUART+0xdc>
		else sprintf(buf,"ON,%d",tmp);
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	490d      	ldr	r1, [pc, #52]	; (8003d3c <sendByUART+0x10c>)
 8003d06:	4809      	ldr	r0, [pc, #36]	; (8003d2c <sendByUART+0xfc>)
 8003d08:	f000 fe02 	bl	8004910 <siprintf>

	}
	HAL_UART_Transmit(&huart2, buf, sizeof(buf), 1000);
 8003d0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d10:	220a      	movs	r2, #10
 8003d12:	4906      	ldr	r1, [pc, #24]	; (8003d2c <sendByUART+0xfc>)
 8003d14:	480a      	ldr	r0, [pc, #40]	; (8003d40 <sendByUART+0x110>)
 8003d16:	f7ff fb14 	bl	8003342 <HAL_UART_Transmit>
}
 8003d1a:	bf00      	nop
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bdb0      	pop	{r4, r5, r7, pc}
 8003d22:	bf00      	nop
 8003d24:	20000008 	.word	0x20000008
 8003d28:	40590000 	.word	0x40590000
 8003d2c:	2000016c 	.word	0x2000016c
 8003d30:	08005134 	.word	0x08005134
 8003d34:	08005140 	.word	0x08005140
 8003d38:	0800514c 	.word	0x0800514c
 8003d3c:	08005154 	.word	0x08005154
 8003d40:	200001d8 	.word	0x200001d8

08003d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d4a:	f7fd f827 	bl	8000d9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d4e:	f000 f87b 	bl	8003e48 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  unsigned int minEmpty=15;
 8003d52:	230f      	movs	r3, #15
 8003d54:	60fb      	str	r3, [r7, #12]
  unsigned int maxEmpty=20;
 8003d56:	2314      	movs	r3, #20
 8003d58:	60bb      	str	r3, [r7, #8]
  unsigned int diffTime = 10;//In second
 8003d5a:	230a      	movs	r3, #10
 8003d5c:	607b      	str	r3, [r7, #4]
  delayTime = 1000; //In milli second
 8003d5e:	4b34      	ldr	r3, [pc, #208]	; (8003e30 <main+0xec>)
 8003d60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d64:	601a      	str	r2, [r3, #0]
  initNotify(diffTime);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7ff ff2c 	bl	8003bc4 <initNotify>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d6c:	f000 fa4c 	bl	8004208 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003d70:	f000 f8ec 	bl	8003f4c <MX_I2C1_Init>
  MX_SPI1_Init();
 8003d74:	f000 f972 	bl	800405c <MX_SPI1_Init>
  MX_TIM4_Init();
 8003d78:	f000 f9a6 	bl	80040c8 <MX_TIM4_Init>
  MX_RTC_Init();
 8003d7c:	f000 f914 	bl	8003fa8 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8003d80:	f000 fa18 	bl	80041b4 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8003d84:	210c      	movs	r1, #12
 8003d86:	482b      	ldr	r0, [pc, #172]	; (8003e34 <main+0xf0>)
 8003d88:	f7fe fd7e 	bl	8002888 <HAL_TIM_PWM_Start>
  while (1)
  {
	  /////////1//////
	  dist  = readFromSensor();
 8003d8c:	f7ff ff34 	bl	8003bf8 <readFromSensor>
 8003d90:	4602      	mov	r2, r0
 8003d92:	4b29      	ldr	r3, [pc, #164]	; (8003e38 <main+0xf4>)
 8003d94:	601a      	str	r2, [r3, #0]
	  if(dist >= minEmpty && dist<=maxEmpty){ //Empty -> Notify
 8003d96:	4b28      	ldr	r3, [pc, #160]	; (8003e38 <main+0xf4>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d810      	bhi.n	8003dc2 <main+0x7e>
 8003da0:	4b25      	ldr	r3, [pc, #148]	; (8003e38 <main+0xf4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d30b      	bcc.n	8003dc2 <main+0x7e>
		  HAL_Delay(30);
 8003daa:	201e      	movs	r0, #30
 8003dac:	f7fd f868 	bl	8000e80 <HAL_Delay>
		  dist = readFromSensor();
 8003db0:	f7ff ff22 	bl	8003bf8 <readFromSensor>
 8003db4:	4602      	mov	r2, r0
 8003db6:	4b20      	ldr	r3, [pc, #128]	; (8003e38 <main+0xf4>)
 8003db8:	601a      	str	r2, [r3, #0]
		  if(dist >=minEmpty && dist <=maxEmpty)
 8003dba:	4b1f      	ldr	r3, [pc, #124]	; (8003e38 <main+0xf4>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	429a      	cmp	r2, r3
	  }
	  else{ //Full
		  //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
		  //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
	  }
	  _Bool status = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14);
 8003dc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003dc6:	481d      	ldr	r0, [pc, #116]	; (8003e3c <main+0xf8>)
 8003dc8:	f7fd fafc 	bl	80013c4 <HAL_GPIO_ReadPin>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	bf14      	ite	ne
 8003dd2:	2301      	movne	r3, #1
 8003dd4:	2300      	moveq	r3, #0
 8003dd6:	70fb      	strb	r3, [r7, #3]
	  sendByUART(status, dist);
 8003dd8:	4b17      	ldr	r3, [pc, #92]	; (8003e38 <main+0xf4>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	78fb      	ldrb	r3, [r7, #3]
 8003de0:	4611      	mov	r1, r2
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7ff ff24 	bl	8003c30 <sendByUART>
	  HAL_Delay(delayTime);
 8003de8:	4b11      	ldr	r3, [pc, #68]	; (8003e30 <main+0xec>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fd f847 	bl	8000e80 <HAL_Delay>


	  if(HAL_UART_Receive(&huart2, buf, 1, 1000) == HAL_OK){ //if receive data from NODEMCU
 8003df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003df6:	2201      	movs	r2, #1
 8003df8:	4911      	ldr	r1, [pc, #68]	; (8003e40 <main+0xfc>)
 8003dfa:	4812      	ldr	r0, [pc, #72]	; (8003e44 <main+0x100>)
 8003dfc:	f7ff fb3a 	bl	8003474 <HAL_UART_Receive>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1c2      	bne.n	8003d8c <main+0x48>
		  if(buf[0]=='1')
 8003e06:	4b0e      	ldr	r3, [pc, #56]	; (8003e40 <main+0xfc>)
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2b31      	cmp	r3, #49	; 0x31
 8003e0c:	d1be      	bne.n	8003d8c <main+0x48>
		  {
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e14:	4809      	ldr	r0, [pc, #36]	; (8003e3c <main+0xf8>)
 8003e16:	f7fd faed 	bl	80013f4 <HAL_GPIO_WritePin>
			  HAL_Delay(1000);
 8003e1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e1e:	f7fd f82f 	bl	8000e80 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8003e22:	2200      	movs	r2, #0
 8003e24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e28:	4804      	ldr	r0, [pc, #16]	; (8003e3c <main+0xf8>)
 8003e2a:	f7fd fae3 	bl	80013f4 <HAL_GPIO_WritePin>
  {
 8003e2e:	e7ad      	b.n	8003d8c <main+0x48>
 8003e30:	20000168 	.word	0x20000168
 8003e34:	200000a8 	.word	0x200000a8
 8003e38:	2000013c 	.word	0x2000013c
 8003e3c:	40020c00 	.word	0x40020c00
 8003e40:	2000016c 	.word	0x2000016c
 8003e44:	200001d8 	.word	0x200001d8

08003e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b098      	sub	sp, #96	; 0x60
 8003e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e52:	2230      	movs	r2, #48	; 0x30
 8003e54:	2100      	movs	r1, #0
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fd52 	bl	8004900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e5c:	f107 031c 	add.w	r3, r7, #28
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	605a      	str	r2, [r3, #4]
 8003e66:	609a      	str	r2, [r3, #8]
 8003e68:	60da      	str	r2, [r3, #12]
 8003e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e6c:	f107 030c 	add.w	r3, r7, #12
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	605a      	str	r2, [r3, #4]
 8003e76:	609a      	str	r2, [r3, #8]
 8003e78:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60bb      	str	r3, [r7, #8]
 8003e7e:	4b31      	ldr	r3, [pc, #196]	; (8003f44 <SystemClock_Config+0xfc>)
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	4a30      	ldr	r2, [pc, #192]	; (8003f44 <SystemClock_Config+0xfc>)
 8003e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e88:	6413      	str	r3, [r2, #64]	; 0x40
 8003e8a:	4b2e      	ldr	r3, [pc, #184]	; (8003f44 <SystemClock_Config+0xfc>)
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e92:	60bb      	str	r3, [r7, #8]
 8003e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e96:	2300      	movs	r3, #0
 8003e98:	607b      	str	r3, [r7, #4]
 8003e9a:	4b2b      	ldr	r3, [pc, #172]	; (8003f48 <SystemClock_Config+0x100>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a2a      	ldr	r2, [pc, #168]	; (8003f48 <SystemClock_Config+0x100>)
 8003ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	4b28      	ldr	r3, [pc, #160]	; (8003f48 <SystemClock_Config+0x100>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eae:	607b      	str	r3, [r7, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003eb2:	2309      	movs	r3, #9
 8003eb4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003eb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003eba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ec4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003eca:	2304      	movs	r3, #4
 8003ecc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003ece:	2348      	movs	r3, #72	; 0x48
 8003ed0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003ed6:	2307      	movs	r3, #7
 8003ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003eda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fd fbca 	bl	8001678 <HAL_RCC_OscConfig>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003eea:	f000 faab 	bl	8004444 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003eee:	230f      	movs	r3, #15
 8003ef0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003efe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f04:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003f06:	f107 031c 	add.w	r3, r7, #28
 8003f0a:	2102      	movs	r1, #2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fd fdf5 	bl	8001afc <HAL_RCC_ClockConfig>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003f18:	f000 fa94 	bl	8004444 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003f20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f24:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f26:	f107 030c 	add.w	r3, r7, #12
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fd ffd4 	bl	8001ed8 <HAL_RCCEx_PeriphCLKConfig>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8003f36:	f000 fa85 	bl	8004444 <Error_Handler>
  }
}
 8003f3a:	bf00      	nop
 8003f3c:	3760      	adds	r7, #96	; 0x60
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	40023800 	.word	0x40023800
 8003f48:	40007000 	.word	0x40007000

08003f4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003f50:	4b12      	ldr	r3, [pc, #72]	; (8003f9c <MX_I2C1_Init+0x50>)
 8003f52:	4a13      	ldr	r2, [pc, #76]	; (8003fa0 <MX_I2C1_Init+0x54>)
 8003f54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003f56:	4b11      	ldr	r3, [pc, #68]	; (8003f9c <MX_I2C1_Init+0x50>)
 8003f58:	4a12      	ldr	r2, [pc, #72]	; (8003fa4 <MX_I2C1_Init+0x58>)
 8003f5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003f5c:	4b0f      	ldr	r3, [pc, #60]	; (8003f9c <MX_I2C1_Init+0x50>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003f62:	4b0e      	ldr	r3, [pc, #56]	; (8003f9c <MX_I2C1_Init+0x50>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f68:	4b0c      	ldr	r3, [pc, #48]	; (8003f9c <MX_I2C1_Init+0x50>)
 8003f6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f70:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <MX_I2C1_Init+0x50>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003f76:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <MX_I2C1_Init+0x50>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f7c:	4b07      	ldr	r3, [pc, #28]	; (8003f9c <MX_I2C1_Init+0x50>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f82:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <MX_I2C1_Init+0x50>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003f88:	4804      	ldr	r0, [pc, #16]	; (8003f9c <MX_I2C1_Init+0x50>)
 8003f8a:	f7fd fa4d 	bl	8001428 <HAL_I2C_Init>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003f94:	f000 fa56 	bl	8004444 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003f98:	bf00      	nop
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	200000e8 	.word	0x200000e8
 8003fa0:	40005400 	.word	0x40005400
 8003fa4:	000186a0 	.word	0x000186a0

08003fa8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003fae:	1d3b      	adds	r3, r7, #4
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	605a      	str	r2, [r3, #4]
 8003fb6:	609a      	str	r2, [r3, #8]
 8003fb8:	60da      	str	r2, [r3, #12]
 8003fba:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8003fc0:	4b24      	ldr	r3, [pc, #144]	; (8004054 <MX_RTC_Init+0xac>)
 8003fc2:	4a25      	ldr	r2, [pc, #148]	; (8004058 <MX_RTC_Init+0xb0>)
 8003fc4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003fc6:	4b23      	ldr	r3, [pc, #140]	; (8004054 <MX_RTC_Init+0xac>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003fcc:	4b21      	ldr	r3, [pc, #132]	; (8004054 <MX_RTC_Init+0xac>)
 8003fce:	227f      	movs	r2, #127	; 0x7f
 8003fd0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003fd2:	4b20      	ldr	r3, [pc, #128]	; (8004054 <MX_RTC_Init+0xac>)
 8003fd4:	22ff      	movs	r2, #255	; 0xff
 8003fd6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003fd8:	4b1e      	ldr	r3, [pc, #120]	; (8004054 <MX_RTC_Init+0xac>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003fde:	4b1d      	ldr	r3, [pc, #116]	; (8004054 <MX_RTC_Init+0xac>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003fe4:	4b1b      	ldr	r3, [pc, #108]	; (8004054 <MX_RTC_Init+0xac>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003fea:	481a      	ldr	r0, [pc, #104]	; (8004054 <MX_RTC_Init+0xac>)
 8003fec:	f7fe f856 	bl	800209c <HAL_RTC_Init>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8003ff6:	f000 fa25 	bl	8004444 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8004002:	2300      	movs	r3, #0
 8004004:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004006:	2300      	movs	r3, #0
 8004008:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800400a:	2300      	movs	r3, #0
 800400c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800400e:	1d3b      	adds	r3, r7, #4
 8004010:	2201      	movs	r2, #1
 8004012:	4619      	mov	r1, r3
 8004014:	480f      	ldr	r0, [pc, #60]	; (8004054 <MX_RTC_Init+0xac>)
 8004016:	f7fe f8d2 	bl	80021be <HAL_RTC_SetTime>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8004020:	f000 fa10 	bl	8004444 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004024:	2301      	movs	r3, #1
 8004026:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8004028:	2301      	movs	r3, #1
 800402a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800402c:	2301      	movs	r3, #1
 800402e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8004030:	2300      	movs	r3, #0
 8004032:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004034:	463b      	mov	r3, r7
 8004036:	2201      	movs	r2, #1
 8004038:	4619      	mov	r1, r3
 800403a:	4806      	ldr	r0, [pc, #24]	; (8004054 <MX_RTC_Init+0xac>)
 800403c:	f7fe f9da 	bl	80023f4 <HAL_RTC_SetDate>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8004046:	f000 f9fd 	bl	8004444 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800404a:	bf00      	nop
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20000140 	.word	0x20000140
 8004058:	40002800 	.word	0x40002800

0800405c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004060:	4b17      	ldr	r3, [pc, #92]	; (80040c0 <MX_SPI1_Init+0x64>)
 8004062:	4a18      	ldr	r2, [pc, #96]	; (80040c4 <MX_SPI1_Init+0x68>)
 8004064:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004066:	4b16      	ldr	r3, [pc, #88]	; (80040c0 <MX_SPI1_Init+0x64>)
 8004068:	f44f 7282 	mov.w	r2, #260	; 0x104
 800406c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800406e:	4b14      	ldr	r3, [pc, #80]	; (80040c0 <MX_SPI1_Init+0x64>)
 8004070:	2200      	movs	r2, #0
 8004072:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004074:	4b12      	ldr	r3, [pc, #72]	; (80040c0 <MX_SPI1_Init+0x64>)
 8004076:	2200      	movs	r2, #0
 8004078:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800407a:	4b11      	ldr	r3, [pc, #68]	; (80040c0 <MX_SPI1_Init+0x64>)
 800407c:	2200      	movs	r2, #0
 800407e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004080:	4b0f      	ldr	r3, [pc, #60]	; (80040c0 <MX_SPI1_Init+0x64>)
 8004082:	2200      	movs	r2, #0
 8004084:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004086:	4b0e      	ldr	r3, [pc, #56]	; (80040c0 <MX_SPI1_Init+0x64>)
 8004088:	f44f 7200 	mov.w	r2, #512	; 0x200
 800408c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800408e:	4b0c      	ldr	r3, [pc, #48]	; (80040c0 <MX_SPI1_Init+0x64>)
 8004090:	2200      	movs	r2, #0
 8004092:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004094:	4b0a      	ldr	r3, [pc, #40]	; (80040c0 <MX_SPI1_Init+0x64>)
 8004096:	2200      	movs	r2, #0
 8004098:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800409a:	4b09      	ldr	r3, [pc, #36]	; (80040c0 <MX_SPI1_Init+0x64>)
 800409c:	2200      	movs	r2, #0
 800409e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040a0:	4b07      	ldr	r3, [pc, #28]	; (80040c0 <MX_SPI1_Init+0x64>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80040a6:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <MX_SPI1_Init+0x64>)
 80040a8:	220a      	movs	r2, #10
 80040aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80040ac:	4804      	ldr	r0, [pc, #16]	; (80040c0 <MX_SPI1_Init+0x64>)
 80040ae:	f7fe fb27 	bl	8002700 <HAL_SPI_Init>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80040b8:	f000 f9c4 	bl	8004444 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80040bc:	bf00      	nop
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	20000178 	.word	0x20000178
 80040c4:	40013000 	.word	0x40013000

080040c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b08e      	sub	sp, #56	; 0x38
 80040cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	605a      	str	r2, [r3, #4]
 80040d8:	609a      	str	r2, [r3, #8]
 80040da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040dc:	f107 0320 	add.w	r3, r7, #32
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040e6:	1d3b      	adds	r3, r7, #4
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	605a      	str	r2, [r3, #4]
 80040ee:	609a      	str	r2, [r3, #8]
 80040f0:	60da      	str	r2, [r3, #12]
 80040f2:	611a      	str	r2, [r3, #16]
 80040f4:	615a      	str	r2, [r3, #20]
 80040f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80040f8:	4b2c      	ldr	r3, [pc, #176]	; (80041ac <MX_TIM4_Init+0xe4>)
 80040fa:	4a2d      	ldr	r2, [pc, #180]	; (80041b0 <MX_TIM4_Init+0xe8>)
 80040fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80040fe:	4b2b      	ldr	r3, [pc, #172]	; (80041ac <MX_TIM4_Init+0xe4>)
 8004100:	2247      	movs	r2, #71	; 0x47
 8004102:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004104:	4b29      	ldr	r3, [pc, #164]	; (80041ac <MX_TIM4_Init+0xe4>)
 8004106:	2200      	movs	r2, #0
 8004108:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800410a:	4b28      	ldr	r3, [pc, #160]	; (80041ac <MX_TIM4_Init+0xe4>)
 800410c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004110:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004112:	4b26      	ldr	r3, [pc, #152]	; (80041ac <MX_TIM4_Init+0xe4>)
 8004114:	2200      	movs	r2, #0
 8004116:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004118:	4b24      	ldr	r3, [pc, #144]	; (80041ac <MX_TIM4_Init+0xe4>)
 800411a:	2200      	movs	r2, #0
 800411c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800411e:	4823      	ldr	r0, [pc, #140]	; (80041ac <MX_TIM4_Init+0xe4>)
 8004120:	f7fe fb52 	bl	80027c8 <HAL_TIM_Base_Init>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800412a:	f000 f98b 	bl	8004444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800412e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004132:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004134:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004138:	4619      	mov	r1, r3
 800413a:	481c      	ldr	r0, [pc, #112]	; (80041ac <MX_TIM4_Init+0xe4>)
 800413c:	f7fe fca8 	bl	8002a90 <HAL_TIM_ConfigClockSource>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8004146:	f000 f97d 	bl	8004444 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800414a:	4818      	ldr	r0, [pc, #96]	; (80041ac <MX_TIM4_Init+0xe4>)
 800414c:	f7fe fb67 	bl	800281e <HAL_TIM_PWM_Init>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8004156:	f000 f975 	bl	8004444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800415a:	2300      	movs	r3, #0
 800415c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800415e:	2300      	movs	r3, #0
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004162:	f107 0320 	add.w	r3, r7, #32
 8004166:	4619      	mov	r1, r3
 8004168:	4810      	ldr	r0, [pc, #64]	; (80041ac <MX_TIM4_Init+0xe4>)
 800416a:	f7ff f858 	bl	800321e <HAL_TIMEx_MasterConfigSynchronization>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8004174:	f000 f966 	bl	8004444 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004178:	2360      	movs	r3, #96	; 0x60
 800417a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800417c:	2300      	movs	r3, #0
 800417e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004180:	2300      	movs	r3, #0
 8004182:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004184:	2300      	movs	r3, #0
 8004186:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004188:	1d3b      	adds	r3, r7, #4
 800418a:	220c      	movs	r2, #12
 800418c:	4619      	mov	r1, r3
 800418e:	4807      	ldr	r0, [pc, #28]	; (80041ac <MX_TIM4_Init+0xe4>)
 8004190:	f7fe fbb8 	bl	8002904 <HAL_TIM_PWM_ConfigChannel>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800419a:	f000 f953 	bl	8004444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800419e:	4803      	ldr	r0, [pc, #12]	; (80041ac <MX_TIM4_Init+0xe4>)
 80041a0:	f000 fa48 	bl	8004634 <HAL_TIM_MspPostInit>

}
 80041a4:	bf00      	nop
 80041a6:	3738      	adds	r7, #56	; 0x38
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	200000a8 	.word	0x200000a8
 80041b0:	40000800 	.word	0x40000800

080041b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80041b8:	4b11      	ldr	r3, [pc, #68]	; (8004200 <MX_USART2_UART_Init+0x4c>)
 80041ba:	4a12      	ldr	r2, [pc, #72]	; (8004204 <MX_USART2_UART_Init+0x50>)
 80041bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80041be:	4b10      	ldr	r3, [pc, #64]	; (8004200 <MX_USART2_UART_Init+0x4c>)
 80041c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80041c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80041c6:	4b0e      	ldr	r3, [pc, #56]	; (8004200 <MX_USART2_UART_Init+0x4c>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80041cc:	4b0c      	ldr	r3, [pc, #48]	; (8004200 <MX_USART2_UART_Init+0x4c>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80041d2:	4b0b      	ldr	r3, [pc, #44]	; (8004200 <MX_USART2_UART_Init+0x4c>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80041d8:	4b09      	ldr	r3, [pc, #36]	; (8004200 <MX_USART2_UART_Init+0x4c>)
 80041da:	220c      	movs	r2, #12
 80041dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041de:	4b08      	ldr	r3, [pc, #32]	; (8004200 <MX_USART2_UART_Init+0x4c>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80041e4:	4b06      	ldr	r3, [pc, #24]	; (8004200 <MX_USART2_UART_Init+0x4c>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80041ea:	4805      	ldr	r0, [pc, #20]	; (8004200 <MX_USART2_UART_Init+0x4c>)
 80041ec:	f7ff f85c 	bl	80032a8 <HAL_UART_Init>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80041f6:	f000 f925 	bl	8004444 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80041fa:	bf00      	nop
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	200001d8 	.word	0x200001d8
 8004204:	40004400 	.word	0x40004400

08004208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08c      	sub	sp, #48	; 0x30
 800420c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800420e:	f107 031c 	add.w	r3, r7, #28
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	605a      	str	r2, [r3, #4]
 8004218:	609a      	str	r2, [r3, #8]
 800421a:	60da      	str	r2, [r3, #12]
 800421c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800421e:	2300      	movs	r3, #0
 8004220:	61bb      	str	r3, [r7, #24]
 8004222:	4b81      	ldr	r3, [pc, #516]	; (8004428 <MX_GPIO_Init+0x220>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	4a80      	ldr	r2, [pc, #512]	; (8004428 <MX_GPIO_Init+0x220>)
 8004228:	f043 0310 	orr.w	r3, r3, #16
 800422c:	6313      	str	r3, [r2, #48]	; 0x30
 800422e:	4b7e      	ldr	r3, [pc, #504]	; (8004428 <MX_GPIO_Init+0x220>)
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	f003 0310 	and.w	r3, r3, #16
 8004236:	61bb      	str	r3, [r7, #24]
 8004238:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800423a:	2300      	movs	r3, #0
 800423c:	617b      	str	r3, [r7, #20]
 800423e:	4b7a      	ldr	r3, [pc, #488]	; (8004428 <MX_GPIO_Init+0x220>)
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	4a79      	ldr	r2, [pc, #484]	; (8004428 <MX_GPIO_Init+0x220>)
 8004244:	f043 0304 	orr.w	r3, r3, #4
 8004248:	6313      	str	r3, [r2, #48]	; 0x30
 800424a:	4b77      	ldr	r3, [pc, #476]	; (8004428 <MX_GPIO_Init+0x220>)
 800424c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004256:	2300      	movs	r3, #0
 8004258:	613b      	str	r3, [r7, #16]
 800425a:	4b73      	ldr	r3, [pc, #460]	; (8004428 <MX_GPIO_Init+0x220>)
 800425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425e:	4a72      	ldr	r2, [pc, #456]	; (8004428 <MX_GPIO_Init+0x220>)
 8004260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004264:	6313      	str	r3, [r2, #48]	; 0x30
 8004266:	4b70      	ldr	r3, [pc, #448]	; (8004428 <MX_GPIO_Init+0x220>)
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426e:	613b      	str	r3, [r7, #16]
 8004270:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004272:	2300      	movs	r3, #0
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	4b6c      	ldr	r3, [pc, #432]	; (8004428 <MX_GPIO_Init+0x220>)
 8004278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427a:	4a6b      	ldr	r2, [pc, #428]	; (8004428 <MX_GPIO_Init+0x220>)
 800427c:	f043 0301 	orr.w	r3, r3, #1
 8004280:	6313      	str	r3, [r2, #48]	; 0x30
 8004282:	4b69      	ldr	r3, [pc, #420]	; (8004428 <MX_GPIO_Init+0x220>)
 8004284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800428e:	2300      	movs	r3, #0
 8004290:	60bb      	str	r3, [r7, #8]
 8004292:	4b65      	ldr	r3, [pc, #404]	; (8004428 <MX_GPIO_Init+0x220>)
 8004294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004296:	4a64      	ldr	r2, [pc, #400]	; (8004428 <MX_GPIO_Init+0x220>)
 8004298:	f043 0302 	orr.w	r3, r3, #2
 800429c:	6313      	str	r3, [r2, #48]	; 0x30
 800429e:	4b62      	ldr	r3, [pc, #392]	; (8004428 <MX_GPIO_Init+0x220>)
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	60bb      	str	r3, [r7, #8]
 80042a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80042aa:	2300      	movs	r3, #0
 80042ac:	607b      	str	r3, [r7, #4]
 80042ae:	4b5e      	ldr	r3, [pc, #376]	; (8004428 <MX_GPIO_Init+0x220>)
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	4a5d      	ldr	r2, [pc, #372]	; (8004428 <MX_GPIO_Init+0x220>)
 80042b4:	f043 0308 	orr.w	r3, r3, #8
 80042b8:	6313      	str	r3, [r2, #48]	; 0x30
 80042ba:	4b5b      	ldr	r3, [pc, #364]	; (8004428 <MX_GPIO_Init+0x220>)
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	607b      	str	r3, [r7, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80042c6:	2200      	movs	r2, #0
 80042c8:	2108      	movs	r1, #8
 80042ca:	4858      	ldr	r0, [pc, #352]	; (800442c <MX_GPIO_Init+0x224>)
 80042cc:	f7fd f892 	bl	80013f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80042d0:	2201      	movs	r2, #1
 80042d2:	2101      	movs	r1, #1
 80042d4:	4856      	ldr	r0, [pc, #344]	; (8004430 <MX_GPIO_Init+0x228>)
 80042d6:	f7fd f88d 	bl	80013f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80042da:	2200      	movs	r2, #0
 80042dc:	2110      	movs	r1, #16
 80042de:	4854      	ldr	r0, [pc, #336]	; (8004430 <MX_GPIO_Init+0x228>)
 80042e0:	f7fd f888 	bl	80013f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|Audio_RST_Pin, GPIO_PIN_RESET);
 80042e4:	2200      	movs	r2, #0
 80042e6:	f247 0110 	movw	r1, #28688	; 0x7010
 80042ea:	4852      	ldr	r0, [pc, #328]	; (8004434 <MX_GPIO_Init+0x22c>)
 80042ec:	f7fd f882 	bl	80013f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80042f0:	2308      	movs	r3, #8
 80042f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042f4:	2301      	movs	r3, #1
 80042f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f8:	2300      	movs	r3, #0
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042fc:	2300      	movs	r3, #0
 80042fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8004300:	f107 031c 	add.w	r3, r7, #28
 8004304:	4619      	mov	r1, r3
 8004306:	4849      	ldr	r0, [pc, #292]	; (800442c <MX_GPIO_Init+0x224>)
 8004308:	f7fc fec2 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC4 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_4;
 800430c:	2311      	movs	r3, #17
 800430e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004310:	2301      	movs	r3, #1
 8004312:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004314:	2300      	movs	r3, #0
 8004316:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004318:	2300      	movs	r3, #0
 800431a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800431c:	f107 031c 	add.w	r3, r7, #28
 8004320:	4619      	mov	r1, r3
 8004322:	4843      	ldr	r0, [pc, #268]	; (8004430 <MX_GPIO_Init+0x228>)
 8004324:	f7fc feb4 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8004328:	2308      	movs	r3, #8
 800432a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800432c:	2302      	movs	r3, #2
 800432e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004330:	2300      	movs	r3, #0
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004334:	2300      	movs	r3, #0
 8004336:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004338:	2305      	movs	r3, #5
 800433a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800433c:	f107 031c 	add.w	r3, r7, #28
 8004340:	4619      	mov	r1, r3
 8004342:	483b      	ldr	r0, [pc, #236]	; (8004430 <MX_GPIO_Init+0x228>)
 8004344:	f7fc fea4 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004348:	2301      	movs	r3, #1
 800434a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800434c:	4b3a      	ldr	r3, [pc, #232]	; (8004438 <MX_GPIO_Init+0x230>)
 800434e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004350:	2300      	movs	r3, #0
 8004352:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004354:	f107 031c 	add.w	r3, r7, #28
 8004358:	4619      	mov	r1, r3
 800435a:	4838      	ldr	r0, [pc, #224]	; (800443c <MX_GPIO_Init+0x234>)
 800435c:	f7fc fe98 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004360:	2302      	movs	r3, #2
 8004362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004364:	2300      	movs	r3, #0
 8004366:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004368:	2300      	movs	r3, #0
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800436c:	f107 031c 	add.w	r3, r7, #28
 8004370:	4619      	mov	r1, r3
 8004372:	4832      	ldr	r0, [pc, #200]	; (800443c <MX_GPIO_Init+0x234>)
 8004374:	f7fc fe8c 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8004378:	2310      	movs	r3, #16
 800437a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800437c:	2302      	movs	r3, #2
 800437e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004380:	2300      	movs	r3, #0
 8004382:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004384:	2300      	movs	r3, #0
 8004386:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004388:	2306      	movs	r3, #6
 800438a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800438c:	f107 031c 	add.w	r3, r7, #28
 8004390:	4619      	mov	r1, r3
 8004392:	482a      	ldr	r0, [pc, #168]	; (800443c <MX_GPIO_Init+0x234>)
 8004394:	f7fc fe7c 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8004398:	2304      	movs	r3, #4
 800439a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800439c:	2300      	movs	r3, #0
 800439e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a0:	2300      	movs	r3, #0
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80043a4:	f107 031c 	add.w	r3, r7, #28
 80043a8:	4619      	mov	r1, r3
 80043aa:	4825      	ldr	r0, [pc, #148]	; (8004440 <MX_GPIO_Init+0x238>)
 80043ac:	f7fc fe70 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|Audio_RST_Pin;
 80043b0:	f247 0310 	movw	r3, #28688	; 0x7010
 80043b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043b6:	2301      	movs	r3, #1
 80043b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043be:	2300      	movs	r3, #0
 80043c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043c2:	f107 031c 	add.w	r3, r7, #28
 80043c6:	4619      	mov	r1, r3
 80043c8:	481a      	ldr	r0, [pc, #104]	; (8004434 <MX_GPIO_Init+0x22c>)
 80043ca:	f7fc fe61 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SD_Pin;
 80043ce:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 80043d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d4:	2302      	movs	r3, #2
 80043d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d8:	2300      	movs	r3, #0
 80043da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043dc:	2300      	movs	r3, #0
 80043de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80043e0:	2306      	movs	r3, #6
 80043e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043e4:	f107 031c 	add.w	r3, r7, #28
 80043e8:	4619      	mov	r1, r3
 80043ea:	4811      	ldr	r0, [pc, #68]	; (8004430 <MX_GPIO_Init+0x228>)
 80043ec:	f7fc fe50 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80043f0:	2320      	movs	r3, #32
 80043f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043f4:	2300      	movs	r3, #0
 80043f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f8:	2300      	movs	r3, #0
 80043fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80043fc:	f107 031c 	add.w	r3, r7, #28
 8004400:	4619      	mov	r1, r3
 8004402:	480c      	ldr	r0, [pc, #48]	; (8004434 <MX_GPIO_Init+0x22c>)
 8004404:	f7fc fe44 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8004408:	2302      	movs	r3, #2
 800440a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800440c:	4b0a      	ldr	r3, [pc, #40]	; (8004438 <MX_GPIO_Init+0x230>)
 800440e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004410:	2300      	movs	r3, #0
 8004412:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8004414:	f107 031c 	add.w	r3, r7, #28
 8004418:	4619      	mov	r1, r3
 800441a:	4804      	ldr	r0, [pc, #16]	; (800442c <MX_GPIO_Init+0x224>)
 800441c:	f7fc fe38 	bl	8001090 <HAL_GPIO_Init>

}
 8004420:	bf00      	nop
 8004422:	3730      	adds	r7, #48	; 0x30
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40023800 	.word	0x40023800
 800442c:	40021000 	.word	0x40021000
 8004430:	40020800 	.word	0x40020800
 8004434:	40020c00 	.word	0x40020c00
 8004438:	10120000 	.word	0x10120000
 800443c:	40020000 	.word	0x40020000
 8004440:	40020400 	.word	0x40020400

08004444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004448:	bf00      	nop
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
	...

08004454 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800445a:	2300      	movs	r3, #0
 800445c:	607b      	str	r3, [r7, #4]
 800445e:	4b10      	ldr	r3, [pc, #64]	; (80044a0 <HAL_MspInit+0x4c>)
 8004460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004462:	4a0f      	ldr	r2, [pc, #60]	; (80044a0 <HAL_MspInit+0x4c>)
 8004464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004468:	6453      	str	r3, [r2, #68]	; 0x44
 800446a:	4b0d      	ldr	r3, [pc, #52]	; (80044a0 <HAL_MspInit+0x4c>)
 800446c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004472:	607b      	str	r3, [r7, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004476:	2300      	movs	r3, #0
 8004478:	603b      	str	r3, [r7, #0]
 800447a:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <HAL_MspInit+0x4c>)
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	4a08      	ldr	r2, [pc, #32]	; (80044a0 <HAL_MspInit+0x4c>)
 8004480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004484:	6413      	str	r3, [r2, #64]	; 0x40
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <HAL_MspInit+0x4c>)
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448e:	603b      	str	r3, [r7, #0]
 8004490:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004492:	2007      	movs	r0, #7
 8004494:	f7fc fdc8 	bl	8001028 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004498:	bf00      	nop
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	40023800 	.word	0x40023800

080044a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08a      	sub	sp, #40	; 0x28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ac:	f107 0314 	add.w	r3, r7, #20
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	605a      	str	r2, [r3, #4]
 80044b6:	609a      	str	r2, [r3, #8]
 80044b8:	60da      	str	r2, [r3, #12]
 80044ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a19      	ldr	r2, [pc, #100]	; (8004528 <HAL_I2C_MspInit+0x84>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d12c      	bne.n	8004520 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044c6:	2300      	movs	r3, #0
 80044c8:	613b      	str	r3, [r7, #16]
 80044ca:	4b18      	ldr	r3, [pc, #96]	; (800452c <HAL_I2C_MspInit+0x88>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	4a17      	ldr	r2, [pc, #92]	; (800452c <HAL_I2C_MspInit+0x88>)
 80044d0:	f043 0302 	orr.w	r3, r3, #2
 80044d4:	6313      	str	r3, [r2, #48]	; 0x30
 80044d6:	4b15      	ldr	r3, [pc, #84]	; (800452c <HAL_I2C_MspInit+0x88>)
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	613b      	str	r3, [r7, #16]
 80044e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80044e2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80044e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044e8:	2312      	movs	r3, #18
 80044ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044ec:	2301      	movs	r3, #1
 80044ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044f0:	2300      	movs	r3, #0
 80044f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80044f4:	2304      	movs	r3, #4
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044f8:	f107 0314 	add.w	r3, r7, #20
 80044fc:	4619      	mov	r1, r3
 80044fe:	480c      	ldr	r0, [pc, #48]	; (8004530 <HAL_I2C_MspInit+0x8c>)
 8004500:	f7fc fdc6 	bl	8001090 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004504:	2300      	movs	r3, #0
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	4b08      	ldr	r3, [pc, #32]	; (800452c <HAL_I2C_MspInit+0x88>)
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	4a07      	ldr	r2, [pc, #28]	; (800452c <HAL_I2C_MspInit+0x88>)
 800450e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004512:	6413      	str	r3, [r2, #64]	; 0x40
 8004514:	4b05      	ldr	r3, [pc, #20]	; (800452c <HAL_I2C_MspInit+0x88>)
 8004516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004520:	bf00      	nop
 8004522:	3728      	adds	r7, #40	; 0x28
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40005400 	.word	0x40005400
 800452c:	40023800 	.word	0x40023800
 8004530:	40020400 	.word	0x40020400

08004534 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a05      	ldr	r2, [pc, #20]	; (8004558 <HAL_RTC_MspInit+0x24>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d102      	bne.n	800454c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004546:	4b05      	ldr	r3, [pc, #20]	; (800455c <HAL_RTC_MspInit+0x28>)
 8004548:	2201      	movs	r2, #1
 800454a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	40002800 	.word	0x40002800
 800455c:	42470e3c 	.word	0x42470e3c

08004560 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08a      	sub	sp, #40	; 0x28
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004568:	f107 0314 	add.w	r3, r7, #20
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	605a      	str	r2, [r3, #4]
 8004572:	609a      	str	r2, [r3, #8]
 8004574:	60da      	str	r2, [r3, #12]
 8004576:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a19      	ldr	r2, [pc, #100]	; (80045e4 <HAL_SPI_MspInit+0x84>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d12b      	bne.n	80045da <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004582:	2300      	movs	r3, #0
 8004584:	613b      	str	r3, [r7, #16]
 8004586:	4b18      	ldr	r3, [pc, #96]	; (80045e8 <HAL_SPI_MspInit+0x88>)
 8004588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458a:	4a17      	ldr	r2, [pc, #92]	; (80045e8 <HAL_SPI_MspInit+0x88>)
 800458c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004590:	6453      	str	r3, [r2, #68]	; 0x44
 8004592:	4b15      	ldr	r3, [pc, #84]	; (80045e8 <HAL_SPI_MspInit+0x88>)
 8004594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004596:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800459a:	613b      	str	r3, [r7, #16]
 800459c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800459e:	2300      	movs	r3, #0
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	4b11      	ldr	r3, [pc, #68]	; (80045e8 <HAL_SPI_MspInit+0x88>)
 80045a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a6:	4a10      	ldr	r2, [pc, #64]	; (80045e8 <HAL_SPI_MspInit+0x88>)
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	6313      	str	r3, [r2, #48]	; 0x30
 80045ae:	4b0e      	ldr	r3, [pc, #56]	; (80045e8 <HAL_SPI_MspInit+0x88>)
 80045b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80045ba:	23e0      	movs	r3, #224	; 0xe0
 80045bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045be:	2302      	movs	r3, #2
 80045c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c2:	2300      	movs	r3, #0
 80045c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045c6:	2300      	movs	r3, #0
 80045c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80045ca:	2305      	movs	r3, #5
 80045cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045ce:	f107 0314 	add.w	r3, r7, #20
 80045d2:	4619      	mov	r1, r3
 80045d4:	4805      	ldr	r0, [pc, #20]	; (80045ec <HAL_SPI_MspInit+0x8c>)
 80045d6:	f7fc fd5b 	bl	8001090 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80045da:	bf00      	nop
 80045dc:	3728      	adds	r7, #40	; 0x28
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	40013000 	.word	0x40013000
 80045e8:	40023800 	.word	0x40023800
 80045ec:	40020000 	.word	0x40020000

080045f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a0b      	ldr	r2, [pc, #44]	; (800462c <HAL_TIM_Base_MspInit+0x3c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d10d      	bne.n	800461e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004602:	2300      	movs	r3, #0
 8004604:	60fb      	str	r3, [r7, #12]
 8004606:	4b0a      	ldr	r3, [pc, #40]	; (8004630 <HAL_TIM_Base_MspInit+0x40>)
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	4a09      	ldr	r2, [pc, #36]	; (8004630 <HAL_TIM_Base_MspInit+0x40>)
 800460c:	f043 0304 	orr.w	r3, r3, #4
 8004610:	6413      	str	r3, [r2, #64]	; 0x40
 8004612:	4b07      	ldr	r3, [pc, #28]	; (8004630 <HAL_TIM_Base_MspInit+0x40>)
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	f003 0304 	and.w	r3, r3, #4
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800461e:	bf00      	nop
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	40000800 	.word	0x40000800
 8004630:	40023800 	.word	0x40023800

08004634 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b088      	sub	sp, #32
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800463c:	f107 030c 	add.w	r3, r7, #12
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	605a      	str	r2, [r3, #4]
 8004646:	609a      	str	r2, [r3, #8]
 8004648:	60da      	str	r2, [r3, #12]
 800464a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a12      	ldr	r2, [pc, #72]	; (800469c <HAL_TIM_MspPostInit+0x68>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d11e      	bne.n	8004694 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004656:	2300      	movs	r3, #0
 8004658:	60bb      	str	r3, [r7, #8]
 800465a:	4b11      	ldr	r3, [pc, #68]	; (80046a0 <HAL_TIM_MspPostInit+0x6c>)
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	4a10      	ldr	r2, [pc, #64]	; (80046a0 <HAL_TIM_MspPostInit+0x6c>)
 8004660:	f043 0308 	orr.w	r3, r3, #8
 8004664:	6313      	str	r3, [r2, #48]	; 0x30
 8004666:	4b0e      	ldr	r3, [pc, #56]	; (80046a0 <HAL_TIM_MspPostInit+0x6c>)
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	60bb      	str	r3, [r7, #8]
 8004670:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004676:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004678:	2302      	movs	r3, #2
 800467a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800467c:	2300      	movs	r3, #0
 800467e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004680:	2300      	movs	r3, #0
 8004682:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004684:	2302      	movs	r3, #2
 8004686:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004688:	f107 030c 	add.w	r3, r7, #12
 800468c:	4619      	mov	r1, r3
 800468e:	4805      	ldr	r0, [pc, #20]	; (80046a4 <HAL_TIM_MspPostInit+0x70>)
 8004690:	f7fc fcfe 	bl	8001090 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004694:	bf00      	nop
 8004696:	3720      	adds	r7, #32
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	40000800 	.word	0x40000800
 80046a0:	40023800 	.word	0x40023800
 80046a4:	40020c00 	.word	0x40020c00

080046a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08a      	sub	sp, #40	; 0x28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b0:	f107 0314 	add.w	r3, r7, #20
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	605a      	str	r2, [r3, #4]
 80046ba:	609a      	str	r2, [r3, #8]
 80046bc:	60da      	str	r2, [r3, #12]
 80046be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a19      	ldr	r2, [pc, #100]	; (800472c <HAL_UART_MspInit+0x84>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d12b      	bne.n	8004722 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80046ca:	2300      	movs	r3, #0
 80046cc:	613b      	str	r3, [r7, #16]
 80046ce:	4b18      	ldr	r3, [pc, #96]	; (8004730 <HAL_UART_MspInit+0x88>)
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	4a17      	ldr	r2, [pc, #92]	; (8004730 <HAL_UART_MspInit+0x88>)
 80046d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046d8:	6413      	str	r3, [r2, #64]	; 0x40
 80046da:	4b15      	ldr	r3, [pc, #84]	; (8004730 <HAL_UART_MspInit+0x88>)
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e2:	613b      	str	r3, [r7, #16]
 80046e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046e6:	2300      	movs	r3, #0
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	4b11      	ldr	r3, [pc, #68]	; (8004730 <HAL_UART_MspInit+0x88>)
 80046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ee:	4a10      	ldr	r2, [pc, #64]	; (8004730 <HAL_UART_MspInit+0x88>)
 80046f0:	f043 0301 	orr.w	r3, r3, #1
 80046f4:	6313      	str	r3, [r2, #48]	; 0x30
 80046f6:	4b0e      	ldr	r3, [pc, #56]	; (8004730 <HAL_UART_MspInit+0x88>)
 80046f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004702:	230c      	movs	r3, #12
 8004704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004706:	2302      	movs	r3, #2
 8004708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800470a:	2301      	movs	r3, #1
 800470c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800470e:	2303      	movs	r3, #3
 8004710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004712:	2307      	movs	r3, #7
 8004714:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004716:	f107 0314 	add.w	r3, r7, #20
 800471a:	4619      	mov	r1, r3
 800471c:	4805      	ldr	r0, [pc, #20]	; (8004734 <HAL_UART_MspInit+0x8c>)
 800471e:	f7fc fcb7 	bl	8001090 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004722:	bf00      	nop
 8004724:	3728      	adds	r7, #40	; 0x28
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	40004400 	.word	0x40004400
 8004730:	40023800 	.word	0x40023800
 8004734:	40020000 	.word	0x40020000

08004738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800473c:	bf00      	nop
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004746:	b480      	push	{r7}
 8004748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800474a:	e7fe      	b.n	800474a <HardFault_Handler+0x4>

0800474c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004750:	e7fe      	b.n	8004750 <MemManage_Handler+0x4>

08004752 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004752:	b480      	push	{r7}
 8004754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004756:	e7fe      	b.n	8004756 <BusFault_Handler+0x4>

08004758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800475c:	e7fe      	b.n	800475c <UsageFault_Handler+0x4>

0800475e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800475e:	b480      	push	{r7}
 8004760:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004762:	bf00      	nop
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004770:	bf00      	nop
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800477a:	b480      	push	{r7}
 800477c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800477e:	bf00      	nop
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800478c:	f7fc fb58 	bl	8000e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004790:	bf00      	nop
 8004792:	bd80      	pop	{r7, pc}

08004794 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800479c:	4b11      	ldr	r3, [pc, #68]	; (80047e4 <_sbrk+0x50>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d102      	bne.n	80047aa <_sbrk+0x16>
		heap_end = &end;
 80047a4:	4b0f      	ldr	r3, [pc, #60]	; (80047e4 <_sbrk+0x50>)
 80047a6:	4a10      	ldr	r2, [pc, #64]	; (80047e8 <_sbrk+0x54>)
 80047a8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80047aa:	4b0e      	ldr	r3, [pc, #56]	; (80047e4 <_sbrk+0x50>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80047b0:	4b0c      	ldr	r3, [pc, #48]	; (80047e4 <_sbrk+0x50>)
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4413      	add	r3, r2
 80047b8:	466a      	mov	r2, sp
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d907      	bls.n	80047ce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80047be:	f000 f875 	bl	80048ac <__errno>
 80047c2:	4602      	mov	r2, r0
 80047c4:	230c      	movs	r3, #12
 80047c6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80047c8:	f04f 33ff 	mov.w	r3, #4294967295
 80047cc:	e006      	b.n	80047dc <_sbrk+0x48>
	}

	heap_end += incr;
 80047ce:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <_sbrk+0x50>)
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4413      	add	r3, r2
 80047d6:	4a03      	ldr	r2, [pc, #12]	; (80047e4 <_sbrk+0x50>)
 80047d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80047da:	68fb      	ldr	r3, [r7, #12]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	20000090 	.word	0x20000090
 80047e8:	20000220 	.word	0x20000220

080047ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047f0:	4b16      	ldr	r3, [pc, #88]	; (800484c <SystemInit+0x60>)
 80047f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f6:	4a15      	ldr	r2, [pc, #84]	; (800484c <SystemInit+0x60>)
 80047f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004800:	4b13      	ldr	r3, [pc, #76]	; (8004850 <SystemInit+0x64>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a12      	ldr	r2, [pc, #72]	; (8004850 <SystemInit+0x64>)
 8004806:	f043 0301 	orr.w	r3, r3, #1
 800480a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800480c:	4b10      	ldr	r3, [pc, #64]	; (8004850 <SystemInit+0x64>)
 800480e:	2200      	movs	r2, #0
 8004810:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004812:	4b0f      	ldr	r3, [pc, #60]	; (8004850 <SystemInit+0x64>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a0e      	ldr	r2, [pc, #56]	; (8004850 <SystemInit+0x64>)
 8004818:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800481c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004820:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004822:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <SystemInit+0x64>)
 8004824:	4a0b      	ldr	r2, [pc, #44]	; (8004854 <SystemInit+0x68>)
 8004826:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004828:	4b09      	ldr	r3, [pc, #36]	; (8004850 <SystemInit+0x64>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a08      	ldr	r2, [pc, #32]	; (8004850 <SystemInit+0x64>)
 800482e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004832:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004834:	4b06      	ldr	r3, [pc, #24]	; (8004850 <SystemInit+0x64>)
 8004836:	2200      	movs	r2, #0
 8004838:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800483a:	4b04      	ldr	r3, [pc, #16]	; (800484c <SystemInit+0x60>)
 800483c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004840:	609a      	str	r2, [r3, #8]
#endif
}
 8004842:	bf00      	nop
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	e000ed00 	.word	0xe000ed00
 8004850:	40023800 	.word	0x40023800
 8004854:	24003010 	.word	0x24003010

08004858 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004858:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004890 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800485c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800485e:	e003      	b.n	8004868 <LoopCopyDataInit>

08004860 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004860:	4b0c      	ldr	r3, [pc, #48]	; (8004894 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004862:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004864:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004866:	3104      	adds	r1, #4

08004868 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004868:	480b      	ldr	r0, [pc, #44]	; (8004898 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800486a:	4b0c      	ldr	r3, [pc, #48]	; (800489c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800486c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800486e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004870:	d3f6      	bcc.n	8004860 <CopyDataInit>
  ldr  r2, =_sbss
 8004872:	4a0b      	ldr	r2, [pc, #44]	; (80048a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004874:	e002      	b.n	800487c <LoopFillZerobss>

08004876 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004876:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004878:	f842 3b04 	str.w	r3, [r2], #4

0800487c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800487c:	4b09      	ldr	r3, [pc, #36]	; (80048a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800487e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004880:	d3f9      	bcc.n	8004876 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004882:	f7ff ffb3 	bl	80047ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004886:	f000 f817 	bl	80048b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800488a:	f7ff fa5b 	bl	8003d44 <main>
  bx  lr    
 800488e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004890:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004894:	080051b8 	.word	0x080051b8
  ldr  r0, =_sdata
 8004898:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800489c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80048a0:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80048a4:	2000021c 	.word	0x2000021c

080048a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80048a8:	e7fe      	b.n	80048a8 <ADC_IRQHandler>
	...

080048ac <__errno>:
 80048ac:	4b01      	ldr	r3, [pc, #4]	; (80048b4 <__errno+0x8>)
 80048ae:	6818      	ldr	r0, [r3, #0]
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	20000010 	.word	0x20000010

080048b8 <__libc_init_array>:
 80048b8:	b570      	push	{r4, r5, r6, lr}
 80048ba:	4e0d      	ldr	r6, [pc, #52]	; (80048f0 <__libc_init_array+0x38>)
 80048bc:	4c0d      	ldr	r4, [pc, #52]	; (80048f4 <__libc_init_array+0x3c>)
 80048be:	1ba4      	subs	r4, r4, r6
 80048c0:	10a4      	asrs	r4, r4, #2
 80048c2:	2500      	movs	r5, #0
 80048c4:	42a5      	cmp	r5, r4
 80048c6:	d109      	bne.n	80048dc <__libc_init_array+0x24>
 80048c8:	4e0b      	ldr	r6, [pc, #44]	; (80048f8 <__libc_init_array+0x40>)
 80048ca:	4c0c      	ldr	r4, [pc, #48]	; (80048fc <__libc_init_array+0x44>)
 80048cc:	f000 fc26 	bl	800511c <_init>
 80048d0:	1ba4      	subs	r4, r4, r6
 80048d2:	10a4      	asrs	r4, r4, #2
 80048d4:	2500      	movs	r5, #0
 80048d6:	42a5      	cmp	r5, r4
 80048d8:	d105      	bne.n	80048e6 <__libc_init_array+0x2e>
 80048da:	bd70      	pop	{r4, r5, r6, pc}
 80048dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048e0:	4798      	blx	r3
 80048e2:	3501      	adds	r5, #1
 80048e4:	e7ee      	b.n	80048c4 <__libc_init_array+0xc>
 80048e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048ea:	4798      	blx	r3
 80048ec:	3501      	adds	r5, #1
 80048ee:	e7f2      	b.n	80048d6 <__libc_init_array+0x1e>
 80048f0:	080051b0 	.word	0x080051b0
 80048f4:	080051b0 	.word	0x080051b0
 80048f8:	080051b0 	.word	0x080051b0
 80048fc:	080051b4 	.word	0x080051b4

08004900 <memset>:
 8004900:	4402      	add	r2, r0
 8004902:	4603      	mov	r3, r0
 8004904:	4293      	cmp	r3, r2
 8004906:	d100      	bne.n	800490a <memset+0xa>
 8004908:	4770      	bx	lr
 800490a:	f803 1b01 	strb.w	r1, [r3], #1
 800490e:	e7f9      	b.n	8004904 <memset+0x4>

08004910 <siprintf>:
 8004910:	b40e      	push	{r1, r2, r3}
 8004912:	b500      	push	{lr}
 8004914:	b09c      	sub	sp, #112	; 0x70
 8004916:	ab1d      	add	r3, sp, #116	; 0x74
 8004918:	9002      	str	r0, [sp, #8]
 800491a:	9006      	str	r0, [sp, #24]
 800491c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004920:	4809      	ldr	r0, [pc, #36]	; (8004948 <siprintf+0x38>)
 8004922:	9107      	str	r1, [sp, #28]
 8004924:	9104      	str	r1, [sp, #16]
 8004926:	4909      	ldr	r1, [pc, #36]	; (800494c <siprintf+0x3c>)
 8004928:	f853 2b04 	ldr.w	r2, [r3], #4
 800492c:	9105      	str	r1, [sp, #20]
 800492e:	6800      	ldr	r0, [r0, #0]
 8004930:	9301      	str	r3, [sp, #4]
 8004932:	a902      	add	r1, sp, #8
 8004934:	f000 f866 	bl	8004a04 <_svfiprintf_r>
 8004938:	9b02      	ldr	r3, [sp, #8]
 800493a:	2200      	movs	r2, #0
 800493c:	701a      	strb	r2, [r3, #0]
 800493e:	b01c      	add	sp, #112	; 0x70
 8004940:	f85d eb04 	ldr.w	lr, [sp], #4
 8004944:	b003      	add	sp, #12
 8004946:	4770      	bx	lr
 8004948:	20000010 	.word	0x20000010
 800494c:	ffff0208 	.word	0xffff0208

08004950 <__ssputs_r>:
 8004950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004954:	688e      	ldr	r6, [r1, #8]
 8004956:	429e      	cmp	r6, r3
 8004958:	4682      	mov	sl, r0
 800495a:	460c      	mov	r4, r1
 800495c:	4690      	mov	r8, r2
 800495e:	4699      	mov	r9, r3
 8004960:	d837      	bhi.n	80049d2 <__ssputs_r+0x82>
 8004962:	898a      	ldrh	r2, [r1, #12]
 8004964:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004968:	d031      	beq.n	80049ce <__ssputs_r+0x7e>
 800496a:	6825      	ldr	r5, [r4, #0]
 800496c:	6909      	ldr	r1, [r1, #16]
 800496e:	1a6f      	subs	r7, r5, r1
 8004970:	6965      	ldr	r5, [r4, #20]
 8004972:	2302      	movs	r3, #2
 8004974:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004978:	fb95 f5f3 	sdiv	r5, r5, r3
 800497c:	f109 0301 	add.w	r3, r9, #1
 8004980:	443b      	add	r3, r7
 8004982:	429d      	cmp	r5, r3
 8004984:	bf38      	it	cc
 8004986:	461d      	movcc	r5, r3
 8004988:	0553      	lsls	r3, r2, #21
 800498a:	d530      	bpl.n	80049ee <__ssputs_r+0x9e>
 800498c:	4629      	mov	r1, r5
 800498e:	f000 fb2b 	bl	8004fe8 <_malloc_r>
 8004992:	4606      	mov	r6, r0
 8004994:	b950      	cbnz	r0, 80049ac <__ssputs_r+0x5c>
 8004996:	230c      	movs	r3, #12
 8004998:	f8ca 3000 	str.w	r3, [sl]
 800499c:	89a3      	ldrh	r3, [r4, #12]
 800499e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049a2:	81a3      	strh	r3, [r4, #12]
 80049a4:	f04f 30ff 	mov.w	r0, #4294967295
 80049a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049ac:	463a      	mov	r2, r7
 80049ae:	6921      	ldr	r1, [r4, #16]
 80049b0:	f000 faa8 	bl	8004f04 <memcpy>
 80049b4:	89a3      	ldrh	r3, [r4, #12]
 80049b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049be:	81a3      	strh	r3, [r4, #12]
 80049c0:	6126      	str	r6, [r4, #16]
 80049c2:	6165      	str	r5, [r4, #20]
 80049c4:	443e      	add	r6, r7
 80049c6:	1bed      	subs	r5, r5, r7
 80049c8:	6026      	str	r6, [r4, #0]
 80049ca:	60a5      	str	r5, [r4, #8]
 80049cc:	464e      	mov	r6, r9
 80049ce:	454e      	cmp	r6, r9
 80049d0:	d900      	bls.n	80049d4 <__ssputs_r+0x84>
 80049d2:	464e      	mov	r6, r9
 80049d4:	4632      	mov	r2, r6
 80049d6:	4641      	mov	r1, r8
 80049d8:	6820      	ldr	r0, [r4, #0]
 80049da:	f000 fa9e 	bl	8004f1a <memmove>
 80049de:	68a3      	ldr	r3, [r4, #8]
 80049e0:	1b9b      	subs	r3, r3, r6
 80049e2:	60a3      	str	r3, [r4, #8]
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	441e      	add	r6, r3
 80049e8:	6026      	str	r6, [r4, #0]
 80049ea:	2000      	movs	r0, #0
 80049ec:	e7dc      	b.n	80049a8 <__ssputs_r+0x58>
 80049ee:	462a      	mov	r2, r5
 80049f0:	f000 fb54 	bl	800509c <_realloc_r>
 80049f4:	4606      	mov	r6, r0
 80049f6:	2800      	cmp	r0, #0
 80049f8:	d1e2      	bne.n	80049c0 <__ssputs_r+0x70>
 80049fa:	6921      	ldr	r1, [r4, #16]
 80049fc:	4650      	mov	r0, sl
 80049fe:	f000 faa5 	bl	8004f4c <_free_r>
 8004a02:	e7c8      	b.n	8004996 <__ssputs_r+0x46>

08004a04 <_svfiprintf_r>:
 8004a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a08:	461d      	mov	r5, r3
 8004a0a:	898b      	ldrh	r3, [r1, #12]
 8004a0c:	061f      	lsls	r7, r3, #24
 8004a0e:	b09d      	sub	sp, #116	; 0x74
 8004a10:	4680      	mov	r8, r0
 8004a12:	460c      	mov	r4, r1
 8004a14:	4616      	mov	r6, r2
 8004a16:	d50f      	bpl.n	8004a38 <_svfiprintf_r+0x34>
 8004a18:	690b      	ldr	r3, [r1, #16]
 8004a1a:	b96b      	cbnz	r3, 8004a38 <_svfiprintf_r+0x34>
 8004a1c:	2140      	movs	r1, #64	; 0x40
 8004a1e:	f000 fae3 	bl	8004fe8 <_malloc_r>
 8004a22:	6020      	str	r0, [r4, #0]
 8004a24:	6120      	str	r0, [r4, #16]
 8004a26:	b928      	cbnz	r0, 8004a34 <_svfiprintf_r+0x30>
 8004a28:	230c      	movs	r3, #12
 8004a2a:	f8c8 3000 	str.w	r3, [r8]
 8004a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a32:	e0c8      	b.n	8004bc6 <_svfiprintf_r+0x1c2>
 8004a34:	2340      	movs	r3, #64	; 0x40
 8004a36:	6163      	str	r3, [r4, #20]
 8004a38:	2300      	movs	r3, #0
 8004a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a3c:	2320      	movs	r3, #32
 8004a3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a42:	2330      	movs	r3, #48	; 0x30
 8004a44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a48:	9503      	str	r5, [sp, #12]
 8004a4a:	f04f 0b01 	mov.w	fp, #1
 8004a4e:	4637      	mov	r7, r6
 8004a50:	463d      	mov	r5, r7
 8004a52:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004a56:	b10b      	cbz	r3, 8004a5c <_svfiprintf_r+0x58>
 8004a58:	2b25      	cmp	r3, #37	; 0x25
 8004a5a:	d13e      	bne.n	8004ada <_svfiprintf_r+0xd6>
 8004a5c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004a60:	d00b      	beq.n	8004a7a <_svfiprintf_r+0x76>
 8004a62:	4653      	mov	r3, sl
 8004a64:	4632      	mov	r2, r6
 8004a66:	4621      	mov	r1, r4
 8004a68:	4640      	mov	r0, r8
 8004a6a:	f7ff ff71 	bl	8004950 <__ssputs_r>
 8004a6e:	3001      	adds	r0, #1
 8004a70:	f000 80a4 	beq.w	8004bbc <_svfiprintf_r+0x1b8>
 8004a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a76:	4453      	add	r3, sl
 8004a78:	9309      	str	r3, [sp, #36]	; 0x24
 8004a7a:	783b      	ldrb	r3, [r7, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 809d 	beq.w	8004bbc <_svfiprintf_r+0x1b8>
 8004a82:	2300      	movs	r3, #0
 8004a84:	f04f 32ff 	mov.w	r2, #4294967295
 8004a88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a8c:	9304      	str	r3, [sp, #16]
 8004a8e:	9307      	str	r3, [sp, #28]
 8004a90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a94:	931a      	str	r3, [sp, #104]	; 0x68
 8004a96:	462f      	mov	r7, r5
 8004a98:	2205      	movs	r2, #5
 8004a9a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004a9e:	4850      	ldr	r0, [pc, #320]	; (8004be0 <_svfiprintf_r+0x1dc>)
 8004aa0:	f7fb fb96 	bl	80001d0 <memchr>
 8004aa4:	9b04      	ldr	r3, [sp, #16]
 8004aa6:	b9d0      	cbnz	r0, 8004ade <_svfiprintf_r+0xda>
 8004aa8:	06d9      	lsls	r1, r3, #27
 8004aaa:	bf44      	itt	mi
 8004aac:	2220      	movmi	r2, #32
 8004aae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ab2:	071a      	lsls	r2, r3, #28
 8004ab4:	bf44      	itt	mi
 8004ab6:	222b      	movmi	r2, #43	; 0x2b
 8004ab8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004abc:	782a      	ldrb	r2, [r5, #0]
 8004abe:	2a2a      	cmp	r2, #42	; 0x2a
 8004ac0:	d015      	beq.n	8004aee <_svfiprintf_r+0xea>
 8004ac2:	9a07      	ldr	r2, [sp, #28]
 8004ac4:	462f      	mov	r7, r5
 8004ac6:	2000      	movs	r0, #0
 8004ac8:	250a      	movs	r5, #10
 8004aca:	4639      	mov	r1, r7
 8004acc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ad0:	3b30      	subs	r3, #48	; 0x30
 8004ad2:	2b09      	cmp	r3, #9
 8004ad4:	d94d      	bls.n	8004b72 <_svfiprintf_r+0x16e>
 8004ad6:	b1b8      	cbz	r0, 8004b08 <_svfiprintf_r+0x104>
 8004ad8:	e00f      	b.n	8004afa <_svfiprintf_r+0xf6>
 8004ada:	462f      	mov	r7, r5
 8004adc:	e7b8      	b.n	8004a50 <_svfiprintf_r+0x4c>
 8004ade:	4a40      	ldr	r2, [pc, #256]	; (8004be0 <_svfiprintf_r+0x1dc>)
 8004ae0:	1a80      	subs	r0, r0, r2
 8004ae2:	fa0b f000 	lsl.w	r0, fp, r0
 8004ae6:	4318      	orrs	r0, r3
 8004ae8:	9004      	str	r0, [sp, #16]
 8004aea:	463d      	mov	r5, r7
 8004aec:	e7d3      	b.n	8004a96 <_svfiprintf_r+0x92>
 8004aee:	9a03      	ldr	r2, [sp, #12]
 8004af0:	1d11      	adds	r1, r2, #4
 8004af2:	6812      	ldr	r2, [r2, #0]
 8004af4:	9103      	str	r1, [sp, #12]
 8004af6:	2a00      	cmp	r2, #0
 8004af8:	db01      	blt.n	8004afe <_svfiprintf_r+0xfa>
 8004afa:	9207      	str	r2, [sp, #28]
 8004afc:	e004      	b.n	8004b08 <_svfiprintf_r+0x104>
 8004afe:	4252      	negs	r2, r2
 8004b00:	f043 0302 	orr.w	r3, r3, #2
 8004b04:	9207      	str	r2, [sp, #28]
 8004b06:	9304      	str	r3, [sp, #16]
 8004b08:	783b      	ldrb	r3, [r7, #0]
 8004b0a:	2b2e      	cmp	r3, #46	; 0x2e
 8004b0c:	d10c      	bne.n	8004b28 <_svfiprintf_r+0x124>
 8004b0e:	787b      	ldrb	r3, [r7, #1]
 8004b10:	2b2a      	cmp	r3, #42	; 0x2a
 8004b12:	d133      	bne.n	8004b7c <_svfiprintf_r+0x178>
 8004b14:	9b03      	ldr	r3, [sp, #12]
 8004b16:	1d1a      	adds	r2, r3, #4
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	9203      	str	r2, [sp, #12]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	bfb8      	it	lt
 8004b20:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b24:	3702      	adds	r7, #2
 8004b26:	9305      	str	r3, [sp, #20]
 8004b28:	4d2e      	ldr	r5, [pc, #184]	; (8004be4 <_svfiprintf_r+0x1e0>)
 8004b2a:	7839      	ldrb	r1, [r7, #0]
 8004b2c:	2203      	movs	r2, #3
 8004b2e:	4628      	mov	r0, r5
 8004b30:	f7fb fb4e 	bl	80001d0 <memchr>
 8004b34:	b138      	cbz	r0, 8004b46 <_svfiprintf_r+0x142>
 8004b36:	2340      	movs	r3, #64	; 0x40
 8004b38:	1b40      	subs	r0, r0, r5
 8004b3a:	fa03 f000 	lsl.w	r0, r3, r0
 8004b3e:	9b04      	ldr	r3, [sp, #16]
 8004b40:	4303      	orrs	r3, r0
 8004b42:	3701      	adds	r7, #1
 8004b44:	9304      	str	r3, [sp, #16]
 8004b46:	7839      	ldrb	r1, [r7, #0]
 8004b48:	4827      	ldr	r0, [pc, #156]	; (8004be8 <_svfiprintf_r+0x1e4>)
 8004b4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b4e:	2206      	movs	r2, #6
 8004b50:	1c7e      	adds	r6, r7, #1
 8004b52:	f7fb fb3d 	bl	80001d0 <memchr>
 8004b56:	2800      	cmp	r0, #0
 8004b58:	d038      	beq.n	8004bcc <_svfiprintf_r+0x1c8>
 8004b5a:	4b24      	ldr	r3, [pc, #144]	; (8004bec <_svfiprintf_r+0x1e8>)
 8004b5c:	bb13      	cbnz	r3, 8004ba4 <_svfiprintf_r+0x1a0>
 8004b5e:	9b03      	ldr	r3, [sp, #12]
 8004b60:	3307      	adds	r3, #7
 8004b62:	f023 0307 	bic.w	r3, r3, #7
 8004b66:	3308      	adds	r3, #8
 8004b68:	9303      	str	r3, [sp, #12]
 8004b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b6c:	444b      	add	r3, r9
 8004b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b70:	e76d      	b.n	8004a4e <_svfiprintf_r+0x4a>
 8004b72:	fb05 3202 	mla	r2, r5, r2, r3
 8004b76:	2001      	movs	r0, #1
 8004b78:	460f      	mov	r7, r1
 8004b7a:	e7a6      	b.n	8004aca <_svfiprintf_r+0xc6>
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	3701      	adds	r7, #1
 8004b80:	9305      	str	r3, [sp, #20]
 8004b82:	4619      	mov	r1, r3
 8004b84:	250a      	movs	r5, #10
 8004b86:	4638      	mov	r0, r7
 8004b88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b8c:	3a30      	subs	r2, #48	; 0x30
 8004b8e:	2a09      	cmp	r2, #9
 8004b90:	d903      	bls.n	8004b9a <_svfiprintf_r+0x196>
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d0c8      	beq.n	8004b28 <_svfiprintf_r+0x124>
 8004b96:	9105      	str	r1, [sp, #20]
 8004b98:	e7c6      	b.n	8004b28 <_svfiprintf_r+0x124>
 8004b9a:	fb05 2101 	mla	r1, r5, r1, r2
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	4607      	mov	r7, r0
 8004ba2:	e7f0      	b.n	8004b86 <_svfiprintf_r+0x182>
 8004ba4:	ab03      	add	r3, sp, #12
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	4622      	mov	r2, r4
 8004baa:	4b11      	ldr	r3, [pc, #68]	; (8004bf0 <_svfiprintf_r+0x1ec>)
 8004bac:	a904      	add	r1, sp, #16
 8004bae:	4640      	mov	r0, r8
 8004bb0:	f3af 8000 	nop.w
 8004bb4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004bb8:	4681      	mov	r9, r0
 8004bba:	d1d6      	bne.n	8004b6a <_svfiprintf_r+0x166>
 8004bbc:	89a3      	ldrh	r3, [r4, #12]
 8004bbe:	065b      	lsls	r3, r3, #25
 8004bc0:	f53f af35 	bmi.w	8004a2e <_svfiprintf_r+0x2a>
 8004bc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bc6:	b01d      	add	sp, #116	; 0x74
 8004bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bcc:	ab03      	add	r3, sp, #12
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	4622      	mov	r2, r4
 8004bd2:	4b07      	ldr	r3, [pc, #28]	; (8004bf0 <_svfiprintf_r+0x1ec>)
 8004bd4:	a904      	add	r1, sp, #16
 8004bd6:	4640      	mov	r0, r8
 8004bd8:	f000 f882 	bl	8004ce0 <_printf_i>
 8004bdc:	e7ea      	b.n	8004bb4 <_svfiprintf_r+0x1b0>
 8004bde:	bf00      	nop
 8004be0:	08005174 	.word	0x08005174
 8004be4:	0800517a 	.word	0x0800517a
 8004be8:	0800517e 	.word	0x0800517e
 8004bec:	00000000 	.word	0x00000000
 8004bf0:	08004951 	.word	0x08004951

08004bf4 <_printf_common>:
 8004bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf8:	4691      	mov	r9, r2
 8004bfa:	461f      	mov	r7, r3
 8004bfc:	688a      	ldr	r2, [r1, #8]
 8004bfe:	690b      	ldr	r3, [r1, #16]
 8004c00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c04:	4293      	cmp	r3, r2
 8004c06:	bfb8      	it	lt
 8004c08:	4613      	movlt	r3, r2
 8004c0a:	f8c9 3000 	str.w	r3, [r9]
 8004c0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c12:	4606      	mov	r6, r0
 8004c14:	460c      	mov	r4, r1
 8004c16:	b112      	cbz	r2, 8004c1e <_printf_common+0x2a>
 8004c18:	3301      	adds	r3, #1
 8004c1a:	f8c9 3000 	str.w	r3, [r9]
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	0699      	lsls	r1, r3, #26
 8004c22:	bf42      	ittt	mi
 8004c24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004c28:	3302      	addmi	r3, #2
 8004c2a:	f8c9 3000 	strmi.w	r3, [r9]
 8004c2e:	6825      	ldr	r5, [r4, #0]
 8004c30:	f015 0506 	ands.w	r5, r5, #6
 8004c34:	d107      	bne.n	8004c46 <_printf_common+0x52>
 8004c36:	f104 0a19 	add.w	sl, r4, #25
 8004c3a:	68e3      	ldr	r3, [r4, #12]
 8004c3c:	f8d9 2000 	ldr.w	r2, [r9]
 8004c40:	1a9b      	subs	r3, r3, r2
 8004c42:	42ab      	cmp	r3, r5
 8004c44:	dc28      	bgt.n	8004c98 <_printf_common+0xa4>
 8004c46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004c4a:	6822      	ldr	r2, [r4, #0]
 8004c4c:	3300      	adds	r3, #0
 8004c4e:	bf18      	it	ne
 8004c50:	2301      	movne	r3, #1
 8004c52:	0692      	lsls	r2, r2, #26
 8004c54:	d42d      	bmi.n	8004cb2 <_printf_common+0xbe>
 8004c56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c5a:	4639      	mov	r1, r7
 8004c5c:	4630      	mov	r0, r6
 8004c5e:	47c0      	blx	r8
 8004c60:	3001      	adds	r0, #1
 8004c62:	d020      	beq.n	8004ca6 <_printf_common+0xb2>
 8004c64:	6823      	ldr	r3, [r4, #0]
 8004c66:	68e5      	ldr	r5, [r4, #12]
 8004c68:	f8d9 2000 	ldr.w	r2, [r9]
 8004c6c:	f003 0306 	and.w	r3, r3, #6
 8004c70:	2b04      	cmp	r3, #4
 8004c72:	bf08      	it	eq
 8004c74:	1aad      	subeq	r5, r5, r2
 8004c76:	68a3      	ldr	r3, [r4, #8]
 8004c78:	6922      	ldr	r2, [r4, #16]
 8004c7a:	bf0c      	ite	eq
 8004c7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c80:	2500      	movne	r5, #0
 8004c82:	4293      	cmp	r3, r2
 8004c84:	bfc4      	itt	gt
 8004c86:	1a9b      	subgt	r3, r3, r2
 8004c88:	18ed      	addgt	r5, r5, r3
 8004c8a:	f04f 0900 	mov.w	r9, #0
 8004c8e:	341a      	adds	r4, #26
 8004c90:	454d      	cmp	r5, r9
 8004c92:	d11a      	bne.n	8004cca <_printf_common+0xd6>
 8004c94:	2000      	movs	r0, #0
 8004c96:	e008      	b.n	8004caa <_printf_common+0xb6>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	4652      	mov	r2, sl
 8004c9c:	4639      	mov	r1, r7
 8004c9e:	4630      	mov	r0, r6
 8004ca0:	47c0      	blx	r8
 8004ca2:	3001      	adds	r0, #1
 8004ca4:	d103      	bne.n	8004cae <_printf_common+0xba>
 8004ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8004caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cae:	3501      	adds	r5, #1
 8004cb0:	e7c3      	b.n	8004c3a <_printf_common+0x46>
 8004cb2:	18e1      	adds	r1, r4, r3
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	2030      	movs	r0, #48	; 0x30
 8004cb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cbc:	4422      	add	r2, r4
 8004cbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cc2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cc6:	3302      	adds	r3, #2
 8004cc8:	e7c5      	b.n	8004c56 <_printf_common+0x62>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	4622      	mov	r2, r4
 8004cce:	4639      	mov	r1, r7
 8004cd0:	4630      	mov	r0, r6
 8004cd2:	47c0      	blx	r8
 8004cd4:	3001      	adds	r0, #1
 8004cd6:	d0e6      	beq.n	8004ca6 <_printf_common+0xb2>
 8004cd8:	f109 0901 	add.w	r9, r9, #1
 8004cdc:	e7d8      	b.n	8004c90 <_printf_common+0x9c>
	...

08004ce0 <_printf_i>:
 8004ce0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ce4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004ce8:	460c      	mov	r4, r1
 8004cea:	7e09      	ldrb	r1, [r1, #24]
 8004cec:	b085      	sub	sp, #20
 8004cee:	296e      	cmp	r1, #110	; 0x6e
 8004cf0:	4617      	mov	r7, r2
 8004cf2:	4606      	mov	r6, r0
 8004cf4:	4698      	mov	r8, r3
 8004cf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004cf8:	f000 80b3 	beq.w	8004e62 <_printf_i+0x182>
 8004cfc:	d822      	bhi.n	8004d44 <_printf_i+0x64>
 8004cfe:	2963      	cmp	r1, #99	; 0x63
 8004d00:	d036      	beq.n	8004d70 <_printf_i+0x90>
 8004d02:	d80a      	bhi.n	8004d1a <_printf_i+0x3a>
 8004d04:	2900      	cmp	r1, #0
 8004d06:	f000 80b9 	beq.w	8004e7c <_printf_i+0x19c>
 8004d0a:	2958      	cmp	r1, #88	; 0x58
 8004d0c:	f000 8083 	beq.w	8004e16 <_printf_i+0x136>
 8004d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004d18:	e032      	b.n	8004d80 <_printf_i+0xa0>
 8004d1a:	2964      	cmp	r1, #100	; 0x64
 8004d1c:	d001      	beq.n	8004d22 <_printf_i+0x42>
 8004d1e:	2969      	cmp	r1, #105	; 0x69
 8004d20:	d1f6      	bne.n	8004d10 <_printf_i+0x30>
 8004d22:	6820      	ldr	r0, [r4, #0]
 8004d24:	6813      	ldr	r3, [r2, #0]
 8004d26:	0605      	lsls	r5, r0, #24
 8004d28:	f103 0104 	add.w	r1, r3, #4
 8004d2c:	d52a      	bpl.n	8004d84 <_printf_i+0xa4>
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6011      	str	r1, [r2, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	da03      	bge.n	8004d3e <_printf_i+0x5e>
 8004d36:	222d      	movs	r2, #45	; 0x2d
 8004d38:	425b      	negs	r3, r3
 8004d3a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004d3e:	486f      	ldr	r0, [pc, #444]	; (8004efc <_printf_i+0x21c>)
 8004d40:	220a      	movs	r2, #10
 8004d42:	e039      	b.n	8004db8 <_printf_i+0xd8>
 8004d44:	2973      	cmp	r1, #115	; 0x73
 8004d46:	f000 809d 	beq.w	8004e84 <_printf_i+0x1a4>
 8004d4a:	d808      	bhi.n	8004d5e <_printf_i+0x7e>
 8004d4c:	296f      	cmp	r1, #111	; 0x6f
 8004d4e:	d020      	beq.n	8004d92 <_printf_i+0xb2>
 8004d50:	2970      	cmp	r1, #112	; 0x70
 8004d52:	d1dd      	bne.n	8004d10 <_printf_i+0x30>
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	f043 0320 	orr.w	r3, r3, #32
 8004d5a:	6023      	str	r3, [r4, #0]
 8004d5c:	e003      	b.n	8004d66 <_printf_i+0x86>
 8004d5e:	2975      	cmp	r1, #117	; 0x75
 8004d60:	d017      	beq.n	8004d92 <_printf_i+0xb2>
 8004d62:	2978      	cmp	r1, #120	; 0x78
 8004d64:	d1d4      	bne.n	8004d10 <_printf_i+0x30>
 8004d66:	2378      	movs	r3, #120	; 0x78
 8004d68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d6c:	4864      	ldr	r0, [pc, #400]	; (8004f00 <_printf_i+0x220>)
 8004d6e:	e055      	b.n	8004e1c <_printf_i+0x13c>
 8004d70:	6813      	ldr	r3, [r2, #0]
 8004d72:	1d19      	adds	r1, r3, #4
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6011      	str	r1, [r2, #0]
 8004d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d80:	2301      	movs	r3, #1
 8004d82:	e08c      	b.n	8004e9e <_printf_i+0x1be>
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6011      	str	r1, [r2, #0]
 8004d88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d8c:	bf18      	it	ne
 8004d8e:	b21b      	sxthne	r3, r3
 8004d90:	e7cf      	b.n	8004d32 <_printf_i+0x52>
 8004d92:	6813      	ldr	r3, [r2, #0]
 8004d94:	6825      	ldr	r5, [r4, #0]
 8004d96:	1d18      	adds	r0, r3, #4
 8004d98:	6010      	str	r0, [r2, #0]
 8004d9a:	0628      	lsls	r0, r5, #24
 8004d9c:	d501      	bpl.n	8004da2 <_printf_i+0xc2>
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	e002      	b.n	8004da8 <_printf_i+0xc8>
 8004da2:	0668      	lsls	r0, r5, #25
 8004da4:	d5fb      	bpl.n	8004d9e <_printf_i+0xbe>
 8004da6:	881b      	ldrh	r3, [r3, #0]
 8004da8:	4854      	ldr	r0, [pc, #336]	; (8004efc <_printf_i+0x21c>)
 8004daa:	296f      	cmp	r1, #111	; 0x6f
 8004dac:	bf14      	ite	ne
 8004dae:	220a      	movne	r2, #10
 8004db0:	2208      	moveq	r2, #8
 8004db2:	2100      	movs	r1, #0
 8004db4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004db8:	6865      	ldr	r5, [r4, #4]
 8004dba:	60a5      	str	r5, [r4, #8]
 8004dbc:	2d00      	cmp	r5, #0
 8004dbe:	f2c0 8095 	blt.w	8004eec <_printf_i+0x20c>
 8004dc2:	6821      	ldr	r1, [r4, #0]
 8004dc4:	f021 0104 	bic.w	r1, r1, #4
 8004dc8:	6021      	str	r1, [r4, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d13d      	bne.n	8004e4a <_printf_i+0x16a>
 8004dce:	2d00      	cmp	r5, #0
 8004dd0:	f040 808e 	bne.w	8004ef0 <_printf_i+0x210>
 8004dd4:	4665      	mov	r5, ip
 8004dd6:	2a08      	cmp	r2, #8
 8004dd8:	d10b      	bne.n	8004df2 <_printf_i+0x112>
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	07db      	lsls	r3, r3, #31
 8004dde:	d508      	bpl.n	8004df2 <_printf_i+0x112>
 8004de0:	6923      	ldr	r3, [r4, #16]
 8004de2:	6862      	ldr	r2, [r4, #4]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	bfde      	ittt	le
 8004de8:	2330      	movle	r3, #48	; 0x30
 8004dea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004dee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004df2:	ebac 0305 	sub.w	r3, ip, r5
 8004df6:	6123      	str	r3, [r4, #16]
 8004df8:	f8cd 8000 	str.w	r8, [sp]
 8004dfc:	463b      	mov	r3, r7
 8004dfe:	aa03      	add	r2, sp, #12
 8004e00:	4621      	mov	r1, r4
 8004e02:	4630      	mov	r0, r6
 8004e04:	f7ff fef6 	bl	8004bf4 <_printf_common>
 8004e08:	3001      	adds	r0, #1
 8004e0a:	d14d      	bne.n	8004ea8 <_printf_i+0x1c8>
 8004e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e10:	b005      	add	sp, #20
 8004e12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e16:	4839      	ldr	r0, [pc, #228]	; (8004efc <_printf_i+0x21c>)
 8004e18:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004e1c:	6813      	ldr	r3, [r2, #0]
 8004e1e:	6821      	ldr	r1, [r4, #0]
 8004e20:	1d1d      	adds	r5, r3, #4
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6015      	str	r5, [r2, #0]
 8004e26:	060a      	lsls	r2, r1, #24
 8004e28:	d50b      	bpl.n	8004e42 <_printf_i+0x162>
 8004e2a:	07ca      	lsls	r2, r1, #31
 8004e2c:	bf44      	itt	mi
 8004e2e:	f041 0120 	orrmi.w	r1, r1, #32
 8004e32:	6021      	strmi	r1, [r4, #0]
 8004e34:	b91b      	cbnz	r3, 8004e3e <_printf_i+0x15e>
 8004e36:	6822      	ldr	r2, [r4, #0]
 8004e38:	f022 0220 	bic.w	r2, r2, #32
 8004e3c:	6022      	str	r2, [r4, #0]
 8004e3e:	2210      	movs	r2, #16
 8004e40:	e7b7      	b.n	8004db2 <_printf_i+0xd2>
 8004e42:	064d      	lsls	r5, r1, #25
 8004e44:	bf48      	it	mi
 8004e46:	b29b      	uxthmi	r3, r3
 8004e48:	e7ef      	b.n	8004e2a <_printf_i+0x14a>
 8004e4a:	4665      	mov	r5, ip
 8004e4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e50:	fb02 3311 	mls	r3, r2, r1, r3
 8004e54:	5cc3      	ldrb	r3, [r0, r3]
 8004e56:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	2900      	cmp	r1, #0
 8004e5e:	d1f5      	bne.n	8004e4c <_printf_i+0x16c>
 8004e60:	e7b9      	b.n	8004dd6 <_printf_i+0xf6>
 8004e62:	6813      	ldr	r3, [r2, #0]
 8004e64:	6825      	ldr	r5, [r4, #0]
 8004e66:	6961      	ldr	r1, [r4, #20]
 8004e68:	1d18      	adds	r0, r3, #4
 8004e6a:	6010      	str	r0, [r2, #0]
 8004e6c:	0628      	lsls	r0, r5, #24
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	d501      	bpl.n	8004e76 <_printf_i+0x196>
 8004e72:	6019      	str	r1, [r3, #0]
 8004e74:	e002      	b.n	8004e7c <_printf_i+0x19c>
 8004e76:	066a      	lsls	r2, r5, #25
 8004e78:	d5fb      	bpl.n	8004e72 <_printf_i+0x192>
 8004e7a:	8019      	strh	r1, [r3, #0]
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	6123      	str	r3, [r4, #16]
 8004e80:	4665      	mov	r5, ip
 8004e82:	e7b9      	b.n	8004df8 <_printf_i+0x118>
 8004e84:	6813      	ldr	r3, [r2, #0]
 8004e86:	1d19      	adds	r1, r3, #4
 8004e88:	6011      	str	r1, [r2, #0]
 8004e8a:	681d      	ldr	r5, [r3, #0]
 8004e8c:	6862      	ldr	r2, [r4, #4]
 8004e8e:	2100      	movs	r1, #0
 8004e90:	4628      	mov	r0, r5
 8004e92:	f7fb f99d 	bl	80001d0 <memchr>
 8004e96:	b108      	cbz	r0, 8004e9c <_printf_i+0x1bc>
 8004e98:	1b40      	subs	r0, r0, r5
 8004e9a:	6060      	str	r0, [r4, #4]
 8004e9c:	6863      	ldr	r3, [r4, #4]
 8004e9e:	6123      	str	r3, [r4, #16]
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ea6:	e7a7      	b.n	8004df8 <_printf_i+0x118>
 8004ea8:	6923      	ldr	r3, [r4, #16]
 8004eaa:	462a      	mov	r2, r5
 8004eac:	4639      	mov	r1, r7
 8004eae:	4630      	mov	r0, r6
 8004eb0:	47c0      	blx	r8
 8004eb2:	3001      	adds	r0, #1
 8004eb4:	d0aa      	beq.n	8004e0c <_printf_i+0x12c>
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	079b      	lsls	r3, r3, #30
 8004eba:	d413      	bmi.n	8004ee4 <_printf_i+0x204>
 8004ebc:	68e0      	ldr	r0, [r4, #12]
 8004ebe:	9b03      	ldr	r3, [sp, #12]
 8004ec0:	4298      	cmp	r0, r3
 8004ec2:	bfb8      	it	lt
 8004ec4:	4618      	movlt	r0, r3
 8004ec6:	e7a3      	b.n	8004e10 <_printf_i+0x130>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	464a      	mov	r2, r9
 8004ecc:	4639      	mov	r1, r7
 8004ece:	4630      	mov	r0, r6
 8004ed0:	47c0      	blx	r8
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	d09a      	beq.n	8004e0c <_printf_i+0x12c>
 8004ed6:	3501      	adds	r5, #1
 8004ed8:	68e3      	ldr	r3, [r4, #12]
 8004eda:	9a03      	ldr	r2, [sp, #12]
 8004edc:	1a9b      	subs	r3, r3, r2
 8004ede:	42ab      	cmp	r3, r5
 8004ee0:	dcf2      	bgt.n	8004ec8 <_printf_i+0x1e8>
 8004ee2:	e7eb      	b.n	8004ebc <_printf_i+0x1dc>
 8004ee4:	2500      	movs	r5, #0
 8004ee6:	f104 0919 	add.w	r9, r4, #25
 8004eea:	e7f5      	b.n	8004ed8 <_printf_i+0x1f8>
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1ac      	bne.n	8004e4a <_printf_i+0x16a>
 8004ef0:	7803      	ldrb	r3, [r0, #0]
 8004ef2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ef6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004efa:	e76c      	b.n	8004dd6 <_printf_i+0xf6>
 8004efc:	08005185 	.word	0x08005185
 8004f00:	08005196 	.word	0x08005196

08004f04 <memcpy>:
 8004f04:	b510      	push	{r4, lr}
 8004f06:	1e43      	subs	r3, r0, #1
 8004f08:	440a      	add	r2, r1
 8004f0a:	4291      	cmp	r1, r2
 8004f0c:	d100      	bne.n	8004f10 <memcpy+0xc>
 8004f0e:	bd10      	pop	{r4, pc}
 8004f10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f18:	e7f7      	b.n	8004f0a <memcpy+0x6>

08004f1a <memmove>:
 8004f1a:	4288      	cmp	r0, r1
 8004f1c:	b510      	push	{r4, lr}
 8004f1e:	eb01 0302 	add.w	r3, r1, r2
 8004f22:	d807      	bhi.n	8004f34 <memmove+0x1a>
 8004f24:	1e42      	subs	r2, r0, #1
 8004f26:	4299      	cmp	r1, r3
 8004f28:	d00a      	beq.n	8004f40 <memmove+0x26>
 8004f2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f2e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004f32:	e7f8      	b.n	8004f26 <memmove+0xc>
 8004f34:	4283      	cmp	r3, r0
 8004f36:	d9f5      	bls.n	8004f24 <memmove+0xa>
 8004f38:	1881      	adds	r1, r0, r2
 8004f3a:	1ad2      	subs	r2, r2, r3
 8004f3c:	42d3      	cmn	r3, r2
 8004f3e:	d100      	bne.n	8004f42 <memmove+0x28>
 8004f40:	bd10      	pop	{r4, pc}
 8004f42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f46:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004f4a:	e7f7      	b.n	8004f3c <memmove+0x22>

08004f4c <_free_r>:
 8004f4c:	b538      	push	{r3, r4, r5, lr}
 8004f4e:	4605      	mov	r5, r0
 8004f50:	2900      	cmp	r1, #0
 8004f52:	d045      	beq.n	8004fe0 <_free_r+0x94>
 8004f54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f58:	1f0c      	subs	r4, r1, #4
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	bfb8      	it	lt
 8004f5e:	18e4      	addlt	r4, r4, r3
 8004f60:	f000 f8d2 	bl	8005108 <__malloc_lock>
 8004f64:	4a1f      	ldr	r2, [pc, #124]	; (8004fe4 <_free_r+0x98>)
 8004f66:	6813      	ldr	r3, [r2, #0]
 8004f68:	4610      	mov	r0, r2
 8004f6a:	b933      	cbnz	r3, 8004f7a <_free_r+0x2e>
 8004f6c:	6063      	str	r3, [r4, #4]
 8004f6e:	6014      	str	r4, [r2, #0]
 8004f70:	4628      	mov	r0, r5
 8004f72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f76:	f000 b8c8 	b.w	800510a <__malloc_unlock>
 8004f7a:	42a3      	cmp	r3, r4
 8004f7c:	d90c      	bls.n	8004f98 <_free_r+0x4c>
 8004f7e:	6821      	ldr	r1, [r4, #0]
 8004f80:	1862      	adds	r2, r4, r1
 8004f82:	4293      	cmp	r3, r2
 8004f84:	bf04      	itt	eq
 8004f86:	681a      	ldreq	r2, [r3, #0]
 8004f88:	685b      	ldreq	r3, [r3, #4]
 8004f8a:	6063      	str	r3, [r4, #4]
 8004f8c:	bf04      	itt	eq
 8004f8e:	1852      	addeq	r2, r2, r1
 8004f90:	6022      	streq	r2, [r4, #0]
 8004f92:	6004      	str	r4, [r0, #0]
 8004f94:	e7ec      	b.n	8004f70 <_free_r+0x24>
 8004f96:	4613      	mov	r3, r2
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	b10a      	cbz	r2, 8004fa0 <_free_r+0x54>
 8004f9c:	42a2      	cmp	r2, r4
 8004f9e:	d9fa      	bls.n	8004f96 <_free_r+0x4a>
 8004fa0:	6819      	ldr	r1, [r3, #0]
 8004fa2:	1858      	adds	r0, r3, r1
 8004fa4:	42a0      	cmp	r0, r4
 8004fa6:	d10b      	bne.n	8004fc0 <_free_r+0x74>
 8004fa8:	6820      	ldr	r0, [r4, #0]
 8004faa:	4401      	add	r1, r0
 8004fac:	1858      	adds	r0, r3, r1
 8004fae:	4282      	cmp	r2, r0
 8004fb0:	6019      	str	r1, [r3, #0]
 8004fb2:	d1dd      	bne.n	8004f70 <_free_r+0x24>
 8004fb4:	6810      	ldr	r0, [r2, #0]
 8004fb6:	6852      	ldr	r2, [r2, #4]
 8004fb8:	605a      	str	r2, [r3, #4]
 8004fba:	4401      	add	r1, r0
 8004fbc:	6019      	str	r1, [r3, #0]
 8004fbe:	e7d7      	b.n	8004f70 <_free_r+0x24>
 8004fc0:	d902      	bls.n	8004fc8 <_free_r+0x7c>
 8004fc2:	230c      	movs	r3, #12
 8004fc4:	602b      	str	r3, [r5, #0]
 8004fc6:	e7d3      	b.n	8004f70 <_free_r+0x24>
 8004fc8:	6820      	ldr	r0, [r4, #0]
 8004fca:	1821      	adds	r1, r4, r0
 8004fcc:	428a      	cmp	r2, r1
 8004fce:	bf04      	itt	eq
 8004fd0:	6811      	ldreq	r1, [r2, #0]
 8004fd2:	6852      	ldreq	r2, [r2, #4]
 8004fd4:	6062      	str	r2, [r4, #4]
 8004fd6:	bf04      	itt	eq
 8004fd8:	1809      	addeq	r1, r1, r0
 8004fda:	6021      	streq	r1, [r4, #0]
 8004fdc:	605c      	str	r4, [r3, #4]
 8004fde:	e7c7      	b.n	8004f70 <_free_r+0x24>
 8004fe0:	bd38      	pop	{r3, r4, r5, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20000094 	.word	0x20000094

08004fe8 <_malloc_r>:
 8004fe8:	b570      	push	{r4, r5, r6, lr}
 8004fea:	1ccd      	adds	r5, r1, #3
 8004fec:	f025 0503 	bic.w	r5, r5, #3
 8004ff0:	3508      	adds	r5, #8
 8004ff2:	2d0c      	cmp	r5, #12
 8004ff4:	bf38      	it	cc
 8004ff6:	250c      	movcc	r5, #12
 8004ff8:	2d00      	cmp	r5, #0
 8004ffa:	4606      	mov	r6, r0
 8004ffc:	db01      	blt.n	8005002 <_malloc_r+0x1a>
 8004ffe:	42a9      	cmp	r1, r5
 8005000:	d903      	bls.n	800500a <_malloc_r+0x22>
 8005002:	230c      	movs	r3, #12
 8005004:	6033      	str	r3, [r6, #0]
 8005006:	2000      	movs	r0, #0
 8005008:	bd70      	pop	{r4, r5, r6, pc}
 800500a:	f000 f87d 	bl	8005108 <__malloc_lock>
 800500e:	4a21      	ldr	r2, [pc, #132]	; (8005094 <_malloc_r+0xac>)
 8005010:	6814      	ldr	r4, [r2, #0]
 8005012:	4621      	mov	r1, r4
 8005014:	b991      	cbnz	r1, 800503c <_malloc_r+0x54>
 8005016:	4c20      	ldr	r4, [pc, #128]	; (8005098 <_malloc_r+0xb0>)
 8005018:	6823      	ldr	r3, [r4, #0]
 800501a:	b91b      	cbnz	r3, 8005024 <_malloc_r+0x3c>
 800501c:	4630      	mov	r0, r6
 800501e:	f000 f863 	bl	80050e8 <_sbrk_r>
 8005022:	6020      	str	r0, [r4, #0]
 8005024:	4629      	mov	r1, r5
 8005026:	4630      	mov	r0, r6
 8005028:	f000 f85e 	bl	80050e8 <_sbrk_r>
 800502c:	1c43      	adds	r3, r0, #1
 800502e:	d124      	bne.n	800507a <_malloc_r+0x92>
 8005030:	230c      	movs	r3, #12
 8005032:	6033      	str	r3, [r6, #0]
 8005034:	4630      	mov	r0, r6
 8005036:	f000 f868 	bl	800510a <__malloc_unlock>
 800503a:	e7e4      	b.n	8005006 <_malloc_r+0x1e>
 800503c:	680b      	ldr	r3, [r1, #0]
 800503e:	1b5b      	subs	r3, r3, r5
 8005040:	d418      	bmi.n	8005074 <_malloc_r+0x8c>
 8005042:	2b0b      	cmp	r3, #11
 8005044:	d90f      	bls.n	8005066 <_malloc_r+0x7e>
 8005046:	600b      	str	r3, [r1, #0]
 8005048:	50cd      	str	r5, [r1, r3]
 800504a:	18cc      	adds	r4, r1, r3
 800504c:	4630      	mov	r0, r6
 800504e:	f000 f85c 	bl	800510a <__malloc_unlock>
 8005052:	f104 000b 	add.w	r0, r4, #11
 8005056:	1d23      	adds	r3, r4, #4
 8005058:	f020 0007 	bic.w	r0, r0, #7
 800505c:	1ac3      	subs	r3, r0, r3
 800505e:	d0d3      	beq.n	8005008 <_malloc_r+0x20>
 8005060:	425a      	negs	r2, r3
 8005062:	50e2      	str	r2, [r4, r3]
 8005064:	e7d0      	b.n	8005008 <_malloc_r+0x20>
 8005066:	428c      	cmp	r4, r1
 8005068:	684b      	ldr	r3, [r1, #4]
 800506a:	bf16      	itet	ne
 800506c:	6063      	strne	r3, [r4, #4]
 800506e:	6013      	streq	r3, [r2, #0]
 8005070:	460c      	movne	r4, r1
 8005072:	e7eb      	b.n	800504c <_malloc_r+0x64>
 8005074:	460c      	mov	r4, r1
 8005076:	6849      	ldr	r1, [r1, #4]
 8005078:	e7cc      	b.n	8005014 <_malloc_r+0x2c>
 800507a:	1cc4      	adds	r4, r0, #3
 800507c:	f024 0403 	bic.w	r4, r4, #3
 8005080:	42a0      	cmp	r0, r4
 8005082:	d005      	beq.n	8005090 <_malloc_r+0xa8>
 8005084:	1a21      	subs	r1, r4, r0
 8005086:	4630      	mov	r0, r6
 8005088:	f000 f82e 	bl	80050e8 <_sbrk_r>
 800508c:	3001      	adds	r0, #1
 800508e:	d0cf      	beq.n	8005030 <_malloc_r+0x48>
 8005090:	6025      	str	r5, [r4, #0]
 8005092:	e7db      	b.n	800504c <_malloc_r+0x64>
 8005094:	20000094 	.word	0x20000094
 8005098:	20000098 	.word	0x20000098

0800509c <_realloc_r>:
 800509c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800509e:	4607      	mov	r7, r0
 80050a0:	4614      	mov	r4, r2
 80050a2:	460e      	mov	r6, r1
 80050a4:	b921      	cbnz	r1, 80050b0 <_realloc_r+0x14>
 80050a6:	4611      	mov	r1, r2
 80050a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80050ac:	f7ff bf9c 	b.w	8004fe8 <_malloc_r>
 80050b0:	b922      	cbnz	r2, 80050bc <_realloc_r+0x20>
 80050b2:	f7ff ff4b 	bl	8004f4c <_free_r>
 80050b6:	4625      	mov	r5, r4
 80050b8:	4628      	mov	r0, r5
 80050ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050bc:	f000 f826 	bl	800510c <_malloc_usable_size_r>
 80050c0:	42a0      	cmp	r0, r4
 80050c2:	d20f      	bcs.n	80050e4 <_realloc_r+0x48>
 80050c4:	4621      	mov	r1, r4
 80050c6:	4638      	mov	r0, r7
 80050c8:	f7ff ff8e 	bl	8004fe8 <_malloc_r>
 80050cc:	4605      	mov	r5, r0
 80050ce:	2800      	cmp	r0, #0
 80050d0:	d0f2      	beq.n	80050b8 <_realloc_r+0x1c>
 80050d2:	4631      	mov	r1, r6
 80050d4:	4622      	mov	r2, r4
 80050d6:	f7ff ff15 	bl	8004f04 <memcpy>
 80050da:	4631      	mov	r1, r6
 80050dc:	4638      	mov	r0, r7
 80050de:	f7ff ff35 	bl	8004f4c <_free_r>
 80050e2:	e7e9      	b.n	80050b8 <_realloc_r+0x1c>
 80050e4:	4635      	mov	r5, r6
 80050e6:	e7e7      	b.n	80050b8 <_realloc_r+0x1c>

080050e8 <_sbrk_r>:
 80050e8:	b538      	push	{r3, r4, r5, lr}
 80050ea:	4c06      	ldr	r4, [pc, #24]	; (8005104 <_sbrk_r+0x1c>)
 80050ec:	2300      	movs	r3, #0
 80050ee:	4605      	mov	r5, r0
 80050f0:	4608      	mov	r0, r1
 80050f2:	6023      	str	r3, [r4, #0]
 80050f4:	f7ff fb4e 	bl	8004794 <_sbrk>
 80050f8:	1c43      	adds	r3, r0, #1
 80050fa:	d102      	bne.n	8005102 <_sbrk_r+0x1a>
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	b103      	cbz	r3, 8005102 <_sbrk_r+0x1a>
 8005100:	602b      	str	r3, [r5, #0]
 8005102:	bd38      	pop	{r3, r4, r5, pc}
 8005104:	20000218 	.word	0x20000218

08005108 <__malloc_lock>:
 8005108:	4770      	bx	lr

0800510a <__malloc_unlock>:
 800510a:	4770      	bx	lr

0800510c <_malloc_usable_size_r>:
 800510c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005110:	1f18      	subs	r0, r3, #4
 8005112:	2b00      	cmp	r3, #0
 8005114:	bfbc      	itt	lt
 8005116:	580b      	ldrlt	r3, [r1, r0]
 8005118:	18c0      	addlt	r0, r0, r3
 800511a:	4770      	bx	lr

0800511c <_init>:
 800511c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511e:	bf00      	nop
 8005120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005122:	bc08      	pop	{r3}
 8005124:	469e      	mov	lr, r3
 8005126:	4770      	bx	lr

08005128 <_fini>:
 8005128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512a:	bf00      	nop
 800512c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800512e:	bc08      	pop	{r3}
 8005130:	469e      	mov	lr, r3
 8005132:	4770      	bx	lr
